<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="Objects/_Totum/OBJ-TotumInvert" itemID="5566119d-00001368" lastModified="1490583611" lastUniqueIdentifier="1">
  <timeline>
    <DOMTimeline name="OBJ-TotumInvert">
      <layers>
        <DOMLayer name="actions" color="#9933CC" current="true" isSelected="true" autoNamed="false">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <Actionscript>
                <script><![CDATA[import flash.events.Event;
import flash.media.SoundChannel;

var container:MovieClip;
var switchState:String;
var triggerEvent:Boolean;
var doOnce:Boolean;
var autoOff:Boolean;
var channel:SoundChannel;
var sndCtrl:MovieClip;

var hero:MovieClip;
var eagle:MovieClip;

init();

function init():void {
	switchState = "OFF";
	triggerEvent = false;
	doOnce = true;
	autoOff = false;
	channel = MovieClip(root).sndHoly4Channel;
	
	hero = MovieClip(parent).hero;
	eagle = MovieClip(parent).eagle;
	sndCtrl = MovieClip(root);
}

function update ():void {
	if (CameraDistCheck.inRange(this, true)) {
	
		if (visible) {
		if (switchState == "ON") {
			if (container.currentFrame != 3) container.gotoAndStop(3);
			if (container.active_mc.currentFrame == 46) {
				if (!triggerEvent) {
					triggerEvent = true;
				}
			}
			if (autoOff) {
				if (!eagle.bound.hitTestObject(container.boundTop)) {
					sndCtrl.stopContinuous("sndHoly4");
					switchState = "OFF";
				}
			}
		} else {
			if (switchState == "OFF") {
				if (container.currentFrame != 1) container.gotoAndStop(1);
				if (eagle.bound.hitTestObject(container.boundTop) && eagle.moveable) {
					if (!MovieClip(root).isSoundMute) {
						sndCtrl.playContinuous("sndHoly4", false, 0); 
						//channel = MovieClip(root).sndHoly4.play();
					}
					switchState = "CHARGING";
				}
			}
			if (switchState == "CHARGING") {
				if (container.currentFrame != 2) container.gotoAndStop(2);
				if (!eagle.bound.hitTestObject(container.boundTop)) {
					if (container.charging_mc.currentFrame < 60) {
						sndCtrl.stopContinuous("sndHoly4");
						container.charging_mc.gotoAndPlay(61);
					}
				}
				//once full charged, turn on
				if (container.charging_mc.currentFrame == 60) {
					turnOn();
				}
				//once decharged turn off
				if (container.charging_mc.currentFrame == 80) {
					switchState = "OFF";
				}
			}
		}
		if (triggerEvent) {
			if (doOnce) {

				this.dispatchEvent(new Event("TOTUMACTIVE"));
				doOnce = false;
			}
			
		}
		}
	
	}
}

function turnOn():void {
	switchState = "ON";
}]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 2" color="#9933CC">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMComponentInstance libraryItemName="Objects/OBJ-Colorer-EasyInvert" uniqueID="2">
                  <matrix>
                    <Matrix tx="0.15" ty="-6.25"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <parametersAsXML><![CDATA[   <property id="disable">
      <Inspectable name="disable" variable="disable" category="" verbose="0" defaultValue="false" type="Boolean"/>
   </property>
]]></parametersAsXML>
                </DOMComponentInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 1" color="#4FFF4F">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Objects/_Totum/Assets/OBJ-Totum_container" name="container" centerPoint3DX="-0.15" centerPoint3DY="-5.5">
                  <matrix>
                    <Matrix tx="-0.05" ty="39.5"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>