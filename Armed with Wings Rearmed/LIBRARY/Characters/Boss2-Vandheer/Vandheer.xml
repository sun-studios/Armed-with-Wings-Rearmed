<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="Characters/Boss2-Vandheer/Vandheer" itemID="54d47f5d-000012c1" lastModified="1496184136" lastUniqueIdentifier="10">
  <timeline>
    <DOMTimeline name="Vandheer">
      <layers>
        <DOMLayer name="actions" color="#FF800A" current="true" isSelected="true" autoNamed="false">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <Actionscript>
                <script><![CDATA[import flash.display.MovieClip;
import com.greensock.TweenMax;

var life:Number;
var lifeOrig:Number;
var xSpeed:Number;
var ySpeed:Number;
var moveSpeed:Number;
var attackRange:Number;
var damage:Number;
var enemyLevel:Number;

var attackTimer:Number;
var attackTimerOrig:Number;
var attackIndex:int;

var comboBreak:Number;
var comboBreakOrig:Number;

var teleportX:Number;

var antiFlinchOn:Boolean;
var antiFlinching:Boolean;
var dead:Boolean;
var dodging:Boolean;
var onGround:Boolean;

var enemyType:String = "BOSS2";

var hero:MovieClip;
var sndCtrl:MovieClip;
var vcam:MovieClip;
var bossBar:MovieClip;
var colorer:MovieClip;
var gameData:MovieClip;
var particleLayer:MovieClip;
var ground:MovieClip;
var game:MovieClip;

init();

function init(setLevel:Number = 0):void {
	life = 170;//was 300, 120 before that
	lifeOrig = life;
	
	xSpeed = 0;
	ySpeed = 0;
	moveSpeed = .75;
	attackRange = 60;
	damage = .5;
	
	attackTimer = 320;//320
	attackTimerOrig = attackTimer;
	attackIndex = 0;
	
	comboBreak = 8
	comboBreakOrig = 8
	
	teleportX = 0;

	antiFlinchOn = false;
	antiFlinching = false;
	dead = false;
	
	hero = MovieClip(parent).hero;
	sndCtrl = MovieClip(root);
	vcam = MovieClip(parent).vcam;
	bossBar = MovieClip(root).hud.bossBar;
	gameData = MovieClip(root);
	particleLayer = MovieClip(parent).particleLayer;
	ground = MovieClip(parent).ground;
	game = MovieClip(parent);
	
	gotoAndStop("idle");
	
	if (DebugControl.lowHealthBosses) life = 10;
	
	difficultyCurve(setLevel);
	
	this.addEventListener(MouseEvent.CLICK, onClick, false, 0, true);
}

function onClick(e:MouseEvent):void {
	trace(":::::::::: SOLIDER STATS ::::::::::");
	trace("::enemyLevel :: "+enemyLevel);
	trace("::life :: "+life);
	trace("::damage :: "+damage);
	trace("::moveSpeed :: "+moveSpeed);
	trace("::damage :: "+damage);
	trace(":::::::::::::::::::::::::::::::::::");
}

function difficultyCurve(setLevel:Number = 0):void {
	if (setLevel == 0) {
		if (gameData.gameMode != gameData.SURVIVAL) {
			enemyLevel = game.enemyBaseLevel;
		} else {
			//enemyLevel = Math.ceil(gameData.sessionWave *.75);
		}
		if (gameData.gameDifficulty == gameData.gameDifficultyfutile) {
			var i:Number = Math.round(game.enemyBaseLevel * 1.5);
			enemyLevel = 5+i;
		} else if (gameData.gameDifficulty == gameData.gameDifficultySuperFutile) {
			i = Math.round(game.enemyBaseLevel * 1.7);
			enemyLevel = 6+i;
		}
	} else {
		enemyLevel = setLevel;
	}
	
	if (DebugControl.forceEnemyLevel) {
		enemyLevel = DebugControl.enemyLevel;
	}
	
	life = 170 +(enemyLevel*5);
	lifeOrig = life;
	if (gameData.gameMode == gameData.SURVIVAL) 
		life = lifeOrig = 150;
	
	var mp:Number = (enemyLevel*.05);
	mp -= 1.5; if (mp < 0) mp = 0;
	moveSpeed =  .75 + mp;
	
	var dmg:Number = (enemyLevel*.04);
	dmg -= 1; if (dmg < 0) dmg = 0;
	
	damage = .5 + dmg;
	
	attackRange = 60 + (enemyLevel*1.1);
	
	if (DebugControl.lowHealthBosses) life = 10;
}

function update():void {
	if (hero.heroName == "VANDHEER") {
		if (!antiFlinching) {
			colorer.changeColor(gameData.VFXInvert);
		}
	}
	
	bossBar.add(this);
	physics();
	if (hero.dead) {
		updateAnimation("idle");
	} else {
		if (life > 0) {
			blockHero();
			if (!antiFlinching) {
				difficultyRange();
				if (!isInAttackRange()) {
					moveTowardsHero();
				} else {
					doMeleeAttack();
				}
				attackCycle();
				chargeAttack();
				damageEnemies();
			}
			if (currentFrameLabel != "dodge") dodging = false;
			if (currentFrameLabel == "hurt" && hurt.spinning && onGround) gotoAndStop("idle");
		} else {
			gotoDeath();
		}
	}
}

function doDodge():void {
	if (currentFrameLabel != "dodge") {
		if (checkStep(true, 4)) {
			gotoAndStop("dodge");
			particleLayer.addDust(7,x,y, scaleX);
			sndCtrl.playSound(sndCtrl.sndBossSwing1);
			xSpeed = 10 * -scaleX;
		}
	}
}


function physics():void {
	ySpeed --;
	y -= ySpeed;
		
	var w:Number = 37;
	var h:Number = 80;
	
	
	if (ground.hitTestPoint(getGlobalX(), getGlobalY(3), true)) {
		onGround = true;
	} else {
		onGround = false;
	}

	while (ground.hitTestPoint(getGlobalX(), getGlobalY(), true)) {
		y-= .5;
		ySpeed = 0;
	}
	while (ground.hitTestPoint(getGlobalX(), getGlobalY()-h, true)) {
		y++;
		ySpeed = 0;
	}
	while (ground.hitTestPoint(getGlobalX()-(w*.5), getGlobalY()-(h*.75), true)) {
		xSpeed = 0;
		x ++;
	}
	while (ground.hitTestPoint(getGlobalX()+(w*.5), getGlobalY()-(h*.75), true)) {
		xSpeed = 0;
		x --;
	}
	
	var decell:Number = .5;
	if (xSpeed != 0) {
		x += xSpeed;
		
		if (xSpeed > 0) {
			xSpeed -= .5*decell;
			if (xSpeed < 0) xSpeed = 0;
		}
		if (xSpeed < 0) {
			xSpeed += .5*decell;
			if (xSpeed > 0) xSpeed = 0;
		}
	}
}

function moveTowardsHero():void {
	if (currentFrameLabel != "hurt") {
		if (currentFrameLabel == "idle" || currentFrameLabel == "walk") {
			if (canDodge()) {
				doDodge();
			} else {
				var dir:int;
				if (hero.x < x) dir = -1;
				else dir = 1;
				
				xSpeed = moveSpeed*dir;
				scaleX = dir;
				if (currentFrameLabel != "walk") updateAnimation("walk");
				
			}
		}
	}
}

function canDodge():Boolean {
	
	if (currentFrameLabel != "dodge") {
		if (distanceBetween(this, hero) < attackRange*1.65) {
			if (hero.currentFrameLabel == "attack" && hero.attack.attackStart
			&& (hero.x < x && hero.scaleX == 1 || hero.x > x && hero.scaleX == -1)) {
				return true;
			}
		}
	}
	
	return false;
}

function isInAttackRange():Boolean {
	if (distanceBetween(hero, this) <= attackRange) {
		return true;
	} else {
		return false;
	}
}

function doMeleeAttack():void {
	if (hero.currentFrameLabel == "dodge" && hero.dodge.dodging ) {
		
	} else {
		if (currentFrameLabel != "hurt") {
			if (currentFrameLabel != "attack") {
				if (x < hero.x) scaleX = 1;
				else scaleX = -1;
				gotoAndStop("attack");
				attack.gotoAndPlay("melee");
				
					if (Math.random() < .5) {
						attack.gotoAndPlay("melee");
					} else {
						attack.gotoAndPlay("melee2");
					}
				
			}
		}
	}
}

function takeDamage(from:MovieClip, X:Number = 5, Y:Number = 0, damage:Number = 1, combo:Boolean = true):void {
	if (from.hasOwnProperty("heroName") && life > 0  && !dodging) {
		if (gameData.dataIsGearEquipt("Leech", from.playerID)) {
			if (Math.random() <= gameData.data_leechAmount) {
				from.life += 1;
				if (from.life > from.lifeOrig) from.life = from.lifeOrig;
			}
		}
	}
	if (currentFrameLabel != "death") {
		if (!dodging) {
			damage = damage + (gameData.dataGetWeaponPower()*.15);
			
			life -= damage;
			if (comboBreak > 0) {
				comboBreak --;
			}
			
			if (antiFlinchOn) { 
				xSpeed = (X * from.scaleX) * .4;
			} else {
				xSpeed = (X * from.scaleX) * .6;
				scaleX = from.scaleX *-1;
			}
			
			if (life <= 0) {
				sndCtrl.playHitHardSound();
				gotoDeath();
				vcam.cameraShake = 15;
			} else {
				sndCtrl.playHitSound();
				if (antiFlinchOn) {
					antiFlinch();
				} else {
					updateAnimation("hurt");
					if (this.hurt)
						this.hurt.gotoAndPlay("hurt");
				}
				vcam.cameraShake = Math.random()*damage*12;
			}
			
			if (combo)
				gameData.scoreAttack();
			vcam.battleCool = 60;
			if (from.overdrive) 
					particleLayer.addHitSplash(from, this, 1.5);
				else particleLayer.addHitSplash(from, this);
			if (gameData.sessionCombo > 1) particleLayer.addCombo(x, y, 1);
		}
	} else {
		var goDie:Boolean;
		
		if (this.death.currentFrameLabel == "finalhit") {
			if (hero.currentFrameLabel == "attack" && hero.attack.powerStrike) {
				goDie = true;
			}
		}
		if (from.enemyType == "ICESPIKE") {
			goDie = true;
		}
		
		if (goDie) {
			doDeath();
		}
	}
	
	
		if (comboBreak <= 0 && life > 0) {
			updateAnimation("attack");
			attack.gotoAndPlay("fastTeleport");
			comboBreak = comboBreakOrig;
		}
	
}

function doDeath():void {
	if (gameData.gameMode == gameData.SURVIVAL) {
		//die
		gameData.scoreAttack();
		vcam.battleCool = 60;
		//particleLayer.addHitSplash(from, this);
		this.death.gotoAndPlay("death");
		dead = true;
		gameData.sessionSurvivalBosses ++;
	} else {
		//goto ending cinematic
		if (gameData.heroName == "VANDHEER") {
			gameData.nextLevel();
		} else {
			gameData.gotoCinematic(3);
		}
		
	}
}

//from, X, Y, damage, unblockable, canParry, enemyBlockBounce
function damageEnemies():void {
	if (currentFrameLabel == "attack") {
		
	var hitStandard:MovieClip = this[currentFrameLabel].hit;
	var hitPowerful:MovieClip = this[currentFrameLabel].hit2;
	var hitSlam:MovieClip = this[currentFrameLabel].hit3;
	var hitUlti:MovieClip = this[currentFrameLabel].hit4;
	
	if (hero) 
	{
		
		if (hitStandard && hitStandard.hitTestObject(hero.bound)) {
			hero.takeDamage(this, 6, 0, damage * .5);
		}
		
		if (hitPowerful && hitPowerful.hitTestObject(hero.bound)) {
			hero.takeDamage(this, 14, 11, damage * .7, true, true);
		}
		
		if (hitSlam && hitSlam.hitTestObject(hero.bound)) {
			hero.takeDamage(this, 16, 11, damage, true, true, false);
		}
		
		if (hitUlti && hitUlti.hitTestObject(hero.bound)) {
			hero.takeDamage(this, 6, 0, damage*.5, false, false, false);
		}
		
	}
	}
}

function attackCycle():void {
	if (attackTimer > 0) {
		attackTimer --;
	} else {
		
		if (currentFrameLabel == "walk" || currentFrameLabel == "idle") {
			switch (attackIndex) {
				case 0:
					updateAnimation("attack");
					if (attack)
						attack.gotoAndPlay("shoot");
				break;
				case 1:
					updateAnimation("attack");
					if (attack)
						attack.gotoAndPlay("run");
				break;
				case 2:
					updateAnimation("attack");
					if (attack)
						attack.gotoAndPlay("ulti");
				break;
				case 3:
					updateAnimation("attack");
					if (attack)
						attack.gotoAndPlay("teleport");
				break;
			}
			
			attackIndex ++;
			if (attackIndex > 3) attackIndex = 0;
			attackTimer = attackTimerOrig;
		}
	}
}

function chargeAttack():void {
	if (this.currentFrameLabel == "attack") {
		
		if (attack.charging) {
			xSpeed = 6*scaleX;
			if (distanceBetween(hero, this) < attackRange) {
				attack.gotoAndPlay("slam");
			}
		}
		
	}
}

function goTeleportAttack():void {
	var X:Number;
	var Xbackup:Number;
	X = hero.x + (200 *-hero.scaleX);
	Xbackup = hero.x + (200 *hero.scaleX);
	
	if (!ground.hitTestPoint(hero.getGlobalX(200*-hero.scaleX), getGlobalY(), true)) {
		x = hero.x + (200*-hero.scaleX);
	} else {
		x = hero.x + (200*hero.scaleX);
	}
	
	if (x < hero.x) scaleX = 1;
	else scaleX = -1;
}

function difficultyRange():void {
	if (life <= lifeOrig*.3) {
		//1/3 health
		attackTimerOrig = 50;
		antiFlinchOn = true;
	} else {
		if (life <= lifeOrig*.6) {
			//2/3 health
			attackTimerOrig = 120;
			
		} else {
			//3/3 health
		}
	}
}

function antiFlinch():void {
	colorer.changeColor(MovieClip(root).VFXInvert);
	this[currentFrameLabel].stop();
	antiFlinching = true;
	TweenMax.delayedCall(.25, antiFlinchOver);
}
function antiFlinchOver():void {
	colorer.changeColor(MovieClip(root).VFXStyle);
	this[currentFrameLabel].play();
	antiFlinching = false;
}

function blockHero():void {
	if (hero.currentFrameLabel != "dodge" && hero.currentFrameLabel != "hurt") {
		if (distanceBetween(this, hero) < 20) {
			if (hero.x < x) {
				hero.x --;
				hero.xSpeed = -3;
				xSpeed = 3;
				
			} else 
			if (hero.x > x) {
				hero.x ++;
				hero.xSpeed = 3;
				xSpeed = -3;
			}
		}
	}
}

function gotoDeath():void {
	if (currentFrameLabel != "death") {
		updateAnimation("death");
	}
}

function updateAnimation(animName:String):void {
	if (currentFrameLabel != animName) {
		this[currentFrameLabel].stop();
		gotoAndStop(animName);
	}
}

function checkStep(invertDir:Boolean = false, multiplyer:Number = 1):Boolean {
	var b:Boolean = false;
	var dir:int = this.scaleX;
	if (invertDir) dir *= -1;
	
	if (ground.hitTestPoint(getGlobalX()+((50 * dir)*multiplyer), getGlobalY()+20, true)) {
		b = true;
	} else {
		if (ground.hitTestPoint(getGlobalX()+((50 * dir)*multiplyer), getGlobalY()+60, true)) {
			b = true;
		}
	}
	
	return b;
}

function distanceBetween(obj1:MovieClip,  obj2:MovieClip):Number {
    var dx:Number = obj1.x-obj2.x;
    var dy:Number = obj1.y-obj2.y;
    return Math.sqrt(dx * dx + dy * dy);
}

function getGlobalX(offset:Number = 0):Number {
	var _root:MovieClip = MovieClip(root);
	var _parent:MovieClip = MovieClip(parent);
	return Physics.getGlobalX(_root, _parent, this, offset);
}

function getGlobalY(offset:Number = 0):Number {
	var _root:MovieClip = MovieClip(root);
	var _parent:MovieClip = MovieClip(parent);
	return Physics.getGlobalY(_root, _parent, this, offset);
}]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
            <DOMFrame index="1" duration="6" keyMode="9728">
              <Actionscript>
                <script><![CDATA[stop();]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="label" color="#FF4FFF" autoNamed="false">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements/>
            </DOMFrame>
            <DOMFrame index="1" name="idle" labelType="name" keyMode="9728">
              <elements/>
            </DOMFrame>
            <DOMFrame index="2" name="walk" labelType="name" keyMode="9728">
              <elements/>
            </DOMFrame>
            <DOMFrame index="3" name="attack" labelType="name" keyMode="9728">
              <elements/>
            </DOMFrame>
            <DOMFrame index="4" name="hurt" labelType="name" keyMode="9728">
              <elements/>
            </DOMFrame>
            <DOMFrame index="5" name="death" labelType="name" keyMode="9728">
              <elements/>
            </DOMFrame>
            <DOMFrame index="6" name="dodge" labelType="name" keyMode="9728">
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="clip" color="#4FFF4F" autoNamed="false">
          <frames>
            <DOMFrame index="0" duration="2" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Boss2-Vandheer/assets/anims/Boss/VDL-BossAnim-Idle" name="idle" centerPoint3DX="3.45" centerPoint3DY="-48.5">
                  <matrix>
                    <Matrix a="-1" tx="3.45" ty="1.6"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-50.1"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="2" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Boss2-Vandheer/assets/anims/Boss/VDL-BossAnim-Walk" name="walk" centerPoint3DX="4.3" centerPoint3DY="-50.55">
                  <matrix>
                    <Matrix a="-1" tx="4.3"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-50.55"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="3" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Boss2-Vandheer/assets/anims/Boss/VDL-BossAnim-Attack" name="attack" centerPoint3DX="1.3" centerPoint3DY="-50.55">
                  <matrix>
                    <Matrix a="-1" tx="1.3"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-50.55"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="4" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Boss2-Vandheer/assets/anims/Boss/VDL-BossAnim-Hurt" name="hurt" centerPoint3DX="5.3" centerPoint3DY="-45">
                  <matrix>
                    <Matrix a="-1" tx="5.3" ty="1.25"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-46.25"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="5" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Boss2-Vandheer/assets/anims/Boss/VDL-BossAnim-Dead" name="death" centerPoint3DX="4.3" centerPoint3DY="-41.3">
                  <matrix>
                    <Matrix a="-1" tx="4.3" ty="1.05"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-42.35"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="6" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Boss2-Vandheer/assets/animations/VDL-Animation-Dodge" name="dodge">
                  <matrix>
                    <Matrix tx="3.85" ty="1.35"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-45.5"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="colorer" color="#808080" autoNamed="false">
          <frames>
            <DOMFrame index="0" duration="7" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Objects/OBJ-Colorer-GameObject" name="colorer">
                  <matrix>
                    <Matrix tx="1.95" ty="-96.8"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="-0.05"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="bound" color="#9933CC" autoNamed="false">
          <frames>
            <DOMFrame index="0" duration="7" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Objects/OBJ-Bound" name="bound">
                  <matrix>
                    <Matrix tx="2.4" ty="-43.7"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="-0.05"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>