<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="Characters/Player-Vandheer/Vandheer2" itemID="56570e60-00000e84" lastModified="1520084289" lastUniqueIdentifier="5">
  <timeline>
    <DOMTimeline name="Vandheer2" guides='&lt;guidelines&gt;&lt;guideline direction="h"&gt;-251&lt;/guideline&gt;&lt;/guidelines&gt;'>
      <layers>
        <DOMLayer name="Vandheer-Actions" color="#9933CC" current="true" isSelected="true" autoNamed="false">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <Actionscript>
                <script><![CDATA[//FIND - Vand Player

import flash.display.MovieClip;
import com.greensock.TweenMax;
import flash.sampler.StackFrame;
import boosters.PlayerBoosterManager;

var life:Number;
var lifeOrig:Number;
var xSpeed:Number;
var ySpeed:Number;
var speed:Number;
var maxMoveSpeed:Number;
var maxMoveSpeedDefault:Number;
var powerStrike:Number;
var powerStrikeMax:Number;
var powerStrikeChargeSpeed:Number;
var combo:Number;
var lifeRecoverCool:Number;
var lifeRecoverCoolOrig:Number;
var attackSpeed:Number;
var smokeCounter:Number;
var smokeCounterOrig:Number;
var jumpIndex:Number;
var doubleTapIndex:Number;
var extraRange:Number;//booster
var doubleTappedJump:Boolean;

var blockBreak:Number;
var blockBreakOrig:Number;
var blockBreakRecoverSpeed:Number;

var lightningAuraIndex:Number;
var lightningAuraIndexOrig:Number;

//var overDriveTime:Number;
//var overDriveIndex:Number;

var attkIndex_norm:Number;
var attkIndex_hard:Number;
var attkDir:int;

var iceSpikeSpawn:Number;
var iceSpikeSpawnOrig:Number;
var iceSpikeSpawn2:Number;
var iceSpikeSpawn2Orig:Number;
var iceSpikeCount:Number;
var iceSpikeArr:Array;
var iceSpikeMax:Number;
var hurtStunCounter:int;
var smokeType:int;

var firstAttack:String;
var slideDustIndex:Number;

//This var is only used to fix the ending of a conversation - so you don't auto attack.
var canAttack:Boolean = true;

var disableLadders:Boolean = false;
var disableSlopes:Boolean = false;
var canSwitchtoEagle:Boolean;
var moveable:Boolean;
var active:Boolean;
var checkpoint:Boolean;
var onGround:Boolean;
var onTopWall:Boolean;
var onRightWall:Boolean;
var onLeftWall:Boolean;
var dead:Boolean;
var antiFlinching:Boolean;
var canAntiFlinch:Boolean;
var canAntiFlinchFORCE:Boolean;
var canAntiFlinchCOUNTER:Boolean;
var canUpAttackAir:Boolean;
var canDoubleHit:Boolean;//for booster
var doubleHitAmount:Number;//for booster
var canPowerWave:Boolean;//for booster
var extraAttacks:Boolean;//for booster
var canJuggle:Boolean;//for booster
var extraLundge:Boolean;//for booster
var isUltiStriking:Boolean;// for booster
var onSlope:MovieClip;
var overdrive:Boolean;
var firstDeath:Boolean;
var reviving:Boolean;
var finalBattleDeath:Boolean;
var forceDontDie:Boolean;
var takeDamageOn:Boolean;
var deaddead:Boolean;
var isSliding:Boolean;
var enablePhysics:Boolean;


var jumpFilter1:Boolean;
var jumpFilter2:Boolean;
var jumpFilter3:Boolean;
var jumpFilter4:Boolean;
var boosterFilter1:Boolean;

var heroName:String = "VANDHEER";
var playerID:Number;

var boosterManager:PlayerBoosterManager;
var colorer:MovieClip;
var ground:MovieClip;
var eagle:MovieClip;
var control:PlayerControl;
var _root:MovieClip;
var sndCtrl:MovieClip;
var gameCore:MovieClip;
var game:MovieClip;
var bound:MovieClip;
var vcam:MovieClip;
var particles:MovieClip;
var gameData:MovieClip;
//var pointTarget:MovieClip;

var switchFilter:Boolean;
var attackFilter:Boolean;

//init();

function updateRefs ():void {
	ground = MovieClip(parent).ground;
	eagle = MovieClip(parent).eagle;
	//control = MovieClip(root).player1Control;
	_root = MovieClip(root);
	sndCtrl = MovieClip(root);
	gameCore = MovieClip(root);
	game = MovieClip(parent);
	vcam = MovieClip(parent).vcam;
	particles = MovieClip(parent).particleLayer;
	gameData = MovieClip(root);
}

function init(_playerID:int = 1):void {
	updateRefs();
	
	life = gameData.sessionLife;
	lifeOrig = 10;
	xSpeed = 0;
	ySpeed = 0;
	speed = 1;
	maxMoveSpeed = 4;
	maxMoveSpeedDefault = maxMoveSpeed;
	powerStrike = 0;
	powerStrikeMax = 5;
	powerStrikeChargeSpeed = .075;
	combo = 0;
	lifeRecoverCool = 120;
	lifeRecoverCoolOrig = 120;
	attackSpeed = 0;// max 8
	smokeCounter = 0;
	smokeCounterOrig = 3;
	attkIndex_norm = 0;
	attkIndex_hard = 0;
	attkDir = 0;
	doubleTapIndex = 0;
	//overDriveTime = 400;//10 seconds
	//overDriveIndex = 0;
	lightningAuraIndex = 0;
	lightningAuraIndexOrig = 8;
	hurtStunCounter = 0;
	smokeType = 0;
	extraRange = 0;
	
	blockBreak = 6;
	blockBreakOrig = 6;
	blockBreakRecoverSpeed = .0125;
	
	iceSpikeSpawn = 0;
	iceSpikeSpawnOrig = 6;
	iceSpikeSpawn2 = 0;
	iceSpikeSpawn2Orig = 2;
	iceSpikeCount = 0;
	iceSpikeArr = new Array();
	iceSpikeMax = 14;
	
	moveable = false;
	active = false;
	onGround = false;
	onRightWall = false;
	onLeftWall = false;
	dead = false;
	antiFlinching = false;
	canAntiFlinch = false;
	canAntiFlinchFORCE = false;
	canAntiFlinchCOUNTER = false;
	canSwitchtoEagle = true;
	canUpAttackAir = true;
	takeDamageOn = true;
	enablePhysics = true;
	
	switchFilter = true;
	attackFilter = true;
	boosterFilter1 = true;
	
	playerID = _playerID;
	if (playerID == 2) {
		control = MovieClip(root).player2Control;
		active = true;
		moveable = true;
	} else {
		control = MovieClip(root).player1Control;
	}	
	
	//pointTarget = new PointTarget();
	//addChild(pointTarget);
	//pointTarget.y = -bound.height * .5;
	
	boosterManager = new PlayerBoosterManager();
	addChild(boosterManager);
	//boosterManager.init(this);
	applyItemStats();
}

function applyItemStats():void {
	var gameData:MovieClip = MovieClip(root);
	maxMoveSpeedDefault = maxMoveSpeed = 6 + (gameData.dataGetWeaponSpeed(playerID) *.3);
	powerStrikeMax = 5 + (gameData.dataGetWeaponPower(playerID)*.25);
	powerStrikeChargeSpeed = .03 + (gameData.dataGetWeaponPower(playerID)*.0068);
	trace("PS Speed :: "+powerStrikeChargeSpeed);
	lifeOrig = 5 + (gameData.dataGetWeaponDefence(playerID)*2);
	attackSpeed = Math.round(gameData.dataGetWeaponSpeed(playerID)*.6);
	
	iceSpikeSpawnOrig = 26 - Math.round(gameData.dataGetWeaponPower(playerID));
	iceSpikeSpawn2Orig = 8 - Math.floor(gameData.dataGetWeaponPower(playerID)/3);
	iceSpikeMax = 3 + Math.round(gameData.dataGetWeaponPower(playerID)*.6);
	
	if (life > lifeOrig) life = lifeOrig;
	
	//if (gameData.gameMode == gameData.MULTIPLAYER) {
		//lifeOrig *= .7;
		//life = lifeOrig;
	//}
	
	boosterManager.init(this);
}

function update():void {
	if (gameData.gameMode == gameData.MULTIPLAYER){
		if (playerID == 2)
			colorer.changeColor(gameCore.VFXInvert);
	}
	if (DebugControl.playerInvincible) life = lifeOrig;
	if (boosterManager && (active || moveable) && !deaddead) boosterManager.update();
	
	if (enablePhysics) physics();
	if (!dead) {
		if (control.ctrl_char_block && onGround) {
			
		} else {
			movement();
		}
		
		if (active && life > 0) {
			
			blocking();
			dodgeControl();
			jumpControl();
			if (canAttack) attacks();
			handleIceSpikes();
			damageEnemies();
			//handleOverDive();
			
			if (smokeType == 0) emmitSmoke();
			else if (smokeType == 1) emmitSmoke2();
			
			if (control.ctrl_char_swap || control.ctrl_char_block) {
				if (!switchFilter) {
					if (moveable) {
						if (control.ctrl_char_swap)
							if (!eagle.isInGround()) 
								switchToEagle();
					} else {
						//to make eagle hault
						if (control.ctrl_char_block) {
							switchToHero(true, true);
						} else {
							switchToHero();
						}
					}
					switchFilter = true;
				}
			} else {
				switchFilter = false;
			}
		}
		
		
	}
	//Enable physics need for ultimate strike
	if (enablePhysics) recovery();
	
	if (life < 0) life = 0;
	
	//This is important. But it's also kinda hacky.
	if ((control.ctrl_char_attack || control.ctrl_char_attackPower)) {
		
	} else {
		canAttack = true;
	}
}

function emmitSmoke():void {
	if (this.powerStrike > 0) {

		if (smokeCounter > 0) {
			smokeCounter --;
		} else {
			var _X:Number = x + (Math.random()*(bound.width*.5)) - (Math.random()*(bound.width*.5));
			var _Y:Number = (y - 10) - (Math.random()*(bound.height*.9));
			particles.addSmoke(_X, _Y, .2 + Math.random(), .5 + (Math.random()*.5));
			
			smokeCounter = 1 + ((powerStrikeMax/powerStrike) * .4);
		}
	}
	if (smokeCounter == Infinity) smokeCounter = 0;
}
function emmitSmoke2():void {
	var _X:Number;
	var _Y:Number;
	/*
	if (Math.random()< .5) {
		var _X:Number = x + (Math.random()*(bound.width*.5)) - (Math.random()*(bound.width*.5));
		var _Y:Number = (y - 10) - (Math.random()*(bound.height*.9));
		particles.addSmoke(_X, _Y, .2 + Math.random(), .5 + (Math.random()*.5));
	}
	*/
	
	if (lightningAuraIndex > 0) {
		lightningAuraIndex --;
	} else {
		_X = x + (Math.random()*10)-(Math.random()*10); 
		_Y = y - (bound.height*.5) + (Math.random()*10) - (Math.random()*10);
		var obj:MovieClip = particles.addLightningAura(_X, _Y, 1, 1);
		obj.rotation = Math.random()*360;
		obj.scaleX = .8 + (Math.random()*.4);
		obj.scaleY = .8 + (Math.random()*.4);
		lightningAuraIndex = lightningAuraIndexOrig + (Math.random()*5);
	}
}

function physics():void {
	if (currentFrameLabel == "death" && death.impaled) {
		
	} else {
		
		if (currentFrameLabel != "edge") 
		{
			var w:Number = 57;
			var h:Number = 83;
			
			var fallSpeed:Number
			if (currentFrameLabel == "attack" && attack.airAttack) {
				fallSpeed = .5;
			} else {
				fallSpeed = 1;
			}
			
			ySpeed -= fallSpeed;

			//Fix Y collision overshoot
			if (ySpeed > 1) {
				while (ground.hitTestPoint(getGlobalX(), getGlobalY(-h-ySpeed), true)) ySpeed --;
			}
			
			//Apply Y Movement
			y -= ySpeed;
		}
			
			
			if (xSpeed != 0) {
				//fix X collison overshoot
				if (currentFrameLabel != "walk") {
					if (xSpeed > 1) {
						while (ground.hitTestPoint(getGlobalX((w*.5)+xSpeed), getGlobalY(-h*.5), true)) x --;
					} else if (xSpeed < -1) {
						while (ground.hitTestPoint(getGlobalX((w*-.5)+xSpeed), getGlobalY(-h*.5), true)) x ++;
					}
				}
				
				x += xSpeed;
				
				var decell:Number = 1;
				if (!onGround) decell = .5;
				
				if (xSpeed > 0) {
					xSpeed -= .5*decell;
					if (xSpeed < 0) xSpeed = 0;
				}
				if (xSpeed < 0) {
					xSpeed += .5*decell;
					if (xSpeed > 0) xSpeed = 0;
				}
			}
			
			while (ground.hitTestPoint(getGlobalX(), getGlobalY(), true)) {
				y-= .5;
				ySpeed = 0;
			}
			while (ground.hitTestPoint(getGlobalX(), getGlobalY(-h), true)) {
				if (onGround) {
					x += 1 * scaleX;
				} else {
					y++;
					ySpeed = 0;
				}
			}
			while (ground.hitTestPoint(getGlobalX(-w*.5), getGlobalY(-h*.5), true)) {
				if (this.currentFrameLabel == "hurt" && hurt.spinning){
					if (xSpeed <0) xSpeed *= -.7;
					scaleX = -1;
				} else {
					if (this.currentFrameLabel != "dodge") xSpeed = 0;
				}
				x ++;
			}
			while (ground.hitTestPoint(getGlobalX(w*.5), getGlobalY(-h*.5), true)) {
				if (this.currentFrameLabel == "hurt" && hurt.spinning){
					if (xSpeed > 0) xSpeed *= -.7;
					scaleX = 1;
				} else {
					if (this.currentFrameLabel != "dodge") xSpeed = 0;
				}
				x --;
			}
			
			updateOnSurface();
			
		
		
		
		
	}
}
function updateOnSurface(_w:Number = 57, _h:Number = 83, teleporting:Boolean = false):void {
	var w:Number = _w;
	var h:Number = _h;
	
	if (teleporting) {
		if (ground.hitTestPoint(getGlobalX(), getGlobalY(-h*.25), true)) {
			onGround = true;
		} else {
			onGround = false;
		}
	} else {
		if (ground.hitTestPoint(getGlobalX(), getGlobalY(6), true)) {
			onGround = true;
		} else {
			onGround = false;
		}
	}
	
	if (ground.hitTestPoint(getGlobalX(-w*.5-2), getGlobalY(-h*.5), true)) {
		onLeftWall = true
	} else {
		onLeftWall = false;
	}
	if (ground.hitTestPoint(getGlobalX(w*.5+2), getGlobalY(-h*.5), true)) {
		onRightWall = true
	} else {
		onRightWall = false;
	}
	if (teleporting) {
		if (ground.hitTestPoint(getGlobalX(), getGlobalY(-h)-5, true)) {
			onTopWall = true
		} else {
			onTopWall = false;
		}
	} else {
		if (ground.hitTestPoint(getGlobalX(), getGlobalY(-h), true)) {
			onTopWall = true
		} else {
			onTopWall = false;
		}
	}
}

function movement():void {
	
	if (currentFrameLabel == "idle" || 
		(currentFrameLabel == "walk" && !walk.skidding) || 
		currentFrameLabel == "spinJump" ||
		currentFrameLabel == "jump" ||
		(currentFrameLabel == "dodge" && dodge.airborn) || 
		(currentFrameLabel == "attack" && (attack.airAttack || attack.airStrike))||
		(currentFrameLabel == "hurt" && !onGround && hurtStunCounter <= 0)) {
		
		var input:Boolean = false;
		var dir:int;
		var decell:Number = 1;
		if (!onGround) decell = .5;		
		if (currentFrameLabel == "hurt" && !onGround && hurtStunCounter <= 0) decell = .5;
		if (currentFrameLabel == "spinJump") decell = 1;
		if (currentFrameLabel == "attack" && attack.airStrike) decell = 1;
		
		if (moveable && active) {
			if (control.ctrl_left && !onLeftWall) {
				input = true;
				dir = -1;
				if (xSpeed >= -maxMoveSpeed) {
					xSpeed -= speed*decell;
					if (xSpeed < -maxMoveSpeed) xSpeed = -maxMoveSpeed;
				}
			} else if (control.ctrl_right && !onRightWall) {
				input = true;
				dir = 1;
				if (xSpeed <= maxMoveSpeed) {
					xSpeed += speed*decell;
					if (xSpeed > maxMoveSpeed) xSpeed = maxMoveSpeed;
				}
			}
		} 
		
		if (!active || !moveable) input = false;
		
		if (input) {
			if (onGround) {
				if (currentFrameLabel == "idle") {
					gotoAndStop("walk");
					scaleX = dir;
				}
				if (currentFrameLabel == "walk") {
					if (dir == -1) {
						if (xSpeed > maxMoveSpeed*.5) {
							if (!onSlope)
								walk.gotoAndPlay("skid");
						} else {
							scaleX = dir;
						}
						
					} else 
					if (dir == 1) {
						if (xSpeed < -maxMoveSpeed*.5) {
							if (!onSlope)
								walk.gotoAndPlay("skid");
						} else {
							scaleX = dir;
						}
					}
					
				}
				//Sliding animation
				if (currentFrameLabel == "walk") {
					if (onSlope) {
						if (this.scaleX == onSlope.dir) walk.gotoAndStop("slideF");
					} else {
						if (walk.sliding) {
							walk.gotoAndPlay("walk");
							walk.sliding = false;
						}
					}
				}
			}
		} else {
			if (onGround) {
				if (currentFrameLabel == "walk") {
					if (!onSlope) {
						if (!walk.skidding && Math.abs(xSpeed) >= maxMoveSpeed*.5) {
							walk.gotoAndPlay("skid");
						} else {
							gotoAndStop("idle");
						}
					} else {
						gotoAndStop("idle");
					}
				}
				
			}
		}
	}
	//from jump to idle
	if (onGround && currentFrameLabel == "walk" && walk.jumping) {
		if (control.ctrl_left || control.ctrl_right) {
			walk.gotoAndPlay(1);
		} else {
			gotoAndStop("idle");
		}
	}
	
	//do falling animation
	if (!onGround) {
		if (currentFrameLabel == "idle" || (currentFrameLabel == "walk" && !walk.jumping)) {
			gotoAndStop("walk");
			if (walk) {
				walk.jumping = true;
				walk.gotoAndPlay("fall");
			}
		}
	}
	//sliding dust
	var doDust:Boolean;
	if (onGround && onSlope && scaleX == onSlope.dir) doDust = true;
	if (onGround && onSlope && currentFrameLabel == "idle") doDust = true;
	if (doDust) {
		var _speed:Number = (1 - (Math.abs(xSpeed) / maxMoveSpeedDefault))*10;
		if (slideDustIndex > 0) {
			slideDustIndex--;
		} else {
			var dust:MovieClip;
			dust = addAttackDust();
			if (dust) {
				dust.rotation = rotation;
				if (onSlope.dir == scaleX) {
					dust.y -= rotation*-onSlope.dir;
				} else {
					dust.y += rotation*-onSlope.dir;
				}
				slideDustIndex = _speed;
			}
		}
	}
}

function addAttackDust():MovieClip {
	var r:int = 6 + Math.floor(Math.random()*2);
	var dust:MovieClip;
	if (particles) dust = particles.addDust(r, x+(40*scaleX), y, -scaleX);
	return dust;
}

function attacks():void {
	//reset powerstrike
	if (currentFrameLabel != "attack") powerStrike = 0;
	
	if (moveable) {
		if (control.ctrl_char_attack) {
			if (!attackFilter) {
				
				if (currentFrameLabel == "idle" || (currentFrameLabel == "walk" && (walk.currentFrame < 34 || walk.sliding))) {
					attkIndex_hard = 1;
					attkIndex_norm = 1;
					attkDir = 1;
					//uppercut
					if (control.ctrl_up) {
						firstAttack = "a4";
						//attkIndex_hard = 1;
						attkDir = -1;
					} else {
						//powerstrike
						if (control.ctrl_down) {
							firstAttack = "a9";
							//attkIndex_hard = 1;
							attkDir = 1;
						} else {
							//normal
							firstAttack = "a1";
							//attkIndex_norm = 1;
							attkDir = 0;
							
							if (scaleX == 1 && control.ctrl_left) {
								firstAttack = "a28";
								scaleX *= -1;
							} else 
							if (scaleX == -1 && control.ctrl_right) {
								firstAttack = "a28";
								scaleX *= -1;
							}
						}
					}
					gotoAndStop("attack");
					this.attack.gotoAndPlay(String(firstAttack+"Delay"));
				}
				
				//dodge attacks
				if (currentFrameLabel == "dodge" && this.dodge) {
					if (dodge.attkRoll1) {
						gotoAndStop("attack");
						this.attack.gotoAndPlay("a14");
					} else 
					if (dodge.attkRoll2) {
						gotoAndStop("attack");
						this.attack.gotoAndPlay("a16");
					} else 
					if (dodge.attkRoll3) {
						gotoAndStop("attack");
						this.attack.gotoAndPlay("a14");
					} else
					if (dodge.attkRoll4) {
						gotoAndStop("attack");
						this.attack.gotoAndPlay("a17");
					} else 
					if (dodge.attkRoll5) {
						
					} else 
					if (dodge.attkRoll6) {
						gotoAndStop("attack");
						this.attack.gotoAndPlay("a19");
					} else 
					if (dodge.attkRoll7) {
						gotoAndStop("attack");
						this.attack.gotoAndPlay("a19");
					}
				}
				
				//airial attacks
				var canAirAttack:Boolean;
				if (currentFrameLabel == "attack" && attack.currentFrame >= 1045 && attack.currentFrame <= 1061)
					canAirAttack = true;
				if ((currentFrameLabel == "hurt" && hurt.spinning && hurtStunCounter <= 0)) {
					canAirAttack = true;
				}
				if (currentFrameLabel == "spinJump") canAirAttack = true;
				
				if (canAirAttack) {
					gotoAndStop("attack");
					this.attack.gotoAndPlay("a19");
				}
				
				if (currentFrameLabel == "walk" && walk || currentFrameLabel == "jump") {
					if ((walk && walk.falling) || jump) {
						gotoAndStop("attack");
						this.attack.gotoAndPlay("a19");
					}
				}
			}
		} else {
			attackFilter = false;
		}
		
		if (control.ctrl_char_attackPower) {
			if (canPowerAttack()) {
				if (control.ctrl_down) {
					gotoAndStop("attack");
					if (onGround) {
						this.attack.gotoAndPlay("a5Delay");
					} else {
						if (attack) {
							if (!this.attack.airStrike)
							this.attack.gotoAndPlay("a22");
						}
					}
				} else {
					if (control.ctrl_up) {
						if (onGround) {
							gotoAndStop("attack");
							this.attack.gotoAndPlay("a27");
						} else {
							if (canUpAttackAir) {
								gotoAndStop("attack");
								this.attack.gotoAndPlay("a27");
								canUpAttackAir = false;
							}
						}
							
					} else {
						gotoAndStop("attack");
						if (attack)
							this.attack.gotoAndPlay("a26");
					}
				}
			}
		}
		
		//Attack with booster
		/*
		if (control.ctrl_jump) {
			if (!boosterFilter1) {
				if (currentFrameLabel != "hurt") {
					//projectiles
					if (boosterManager.canUse("Projectile", false)) {
						gotoAndStop("attack");
						if (onGround) {
							this.attack.gotoAndPlay("a3");
						} else {
							this.attack.gotoAndPlay("a18");
						}
						TweenMax.delayedCall(13, shootProjectile, null, true);
					}
					//shoot ice spikes
					if (boosterManager.canUse("IceSpikes", false)) {
						shootIceSpikeBooster();
					}
					//spawn Rock
					if (boosterManager.canUse("Handy Rock")) {
						particles.addRock2(x+(20*scaleX), y-(bound.height*.5), 7*scaleX, 12, 1);
					}
				}
				boosterFilter1 = true;
			}
		} else {
			boosterFilter1 = false;
		}
		*/
	}
		
	if (currentFrameLabel == "attack") {
		//first attack (either standard, power, or uppercut)
		if (attack.currentFrame >= 328-attackSpeed && attack.currentFrame <= 332) {//10
			attack.gotoAndPlay("a1");
		}
		if (attack.currentFrame >= 950-attackSpeed*.7 && attack.currentFrame <= 950) attack.gotoAndPlay("a5");
		if (attack.currentFrame >= 352-attackSpeed*.7 && attack.currentFrame <= 352) attack.gotoAndPlay("a4");
		if (attack.currentFrame >= 362-attackSpeed*.7 && attack.currentFrame <= 362) attack.gotoAndPlay("a9");
	}
	
	
	if (control.ctrl_char_attack || control.ctrl_char_attackPower) {
		if (currentFrameLabel == "attack") {
			var go:Boolean = false;
			var powerGo:Boolean = false;
			var attackString:String = "";
			
			//standard combo
			if (attack.currentFrame > 22-attackSpeed && attack.currentFrame < 24) {//10
				go = true;
				//attackString = "a2";
			}
			if (attack.currentFrame > 46-attackSpeed && attack.currentFrame < 48) {//38
				go = true;
				//attackString = "a6";
			}
			if (attack.currentFrame >206-attackSpeed && attack.currentFrame <207) {//194
				//extended combo perk
				if (extraAttacks) {
					go = true;
					//attackString = "a7";
				} else {
					go = true;
					//attackString = "a3";
				}
			}
			
			//turn around attack
			if (attack.currentFrame >1089-attackSpeed && attack.currentFrame <1090) {
				if (!extraAttacks&& attkIndex_norm < 3) {
					go = true;
				} else if (extraAttacks && attkIndex_norm < 4) {
					go = true;
				}
			}
			
			//extended combo perk
			if (attack.currentFrame > 264-attackSpeed && attack.currentFrame < 271) {
				go = true;
				//attackString = "a8";
			}
			if (attack.currentFrame > 310-attackSpeed && attack.currentFrame < 317) {
				go = true;
				//attackString = "a3";
			}
			
			//experimental down attacks//////////////////////////////////////////////
			if (attack.currentFrame > 380-attackSpeed && attack.currentFrame < 382) {
				go = true;
				//attackString = "a10";
			}
			if (attack.currentFrame > 116-attackSpeed && attack.currentFrame < 117) {
				go = true;
				//attackString = "a11";
			}
			if (attack.currentFrame > 415-attackSpeed && attack.currentFrame < 418) {
				go = true;
				//attackString = "a24";
			}
			if (attack.currentFrame > 862-attackSpeed && attack.currentFrame < 865) {
				go = true;
				//attackString = "a25";
			}
			/////////////////////////////////////////////////////////////////////////
			
			if (attack.currentFrame > 79-attackSpeed && attack.currentFrame < 83) {
				powerGo = true;
			} 
			if (attack.currentFrame > 408-attackSpeed && attack.currentFrame < 409) {
				powerGo = true;
			}
			if (attack.currentFrame > 440-attackSpeed && attack.currentFrame < 450) {
				powerGo = true;
			}
			
			//air attacks////////////
			if (attack.currentFrame >= 694-attackSpeed*.6 && attack.currentFrame <= 696) {
				go = false;
				attack.gotoAndPlay("a21");
			}
		
			if (attack.currentFrame >= 714-attackSpeed*.7 && attack.currentFrame <= 714) {
				go = false;
				attack.gotoAndPlay("a21");
			}
			//from dodge attacks
			if (attack.currentFrame >= 620-attackSpeed*.7 && attack.currentFrame <= 620) {
				//go = false;
				//attack.gotoAndPlay("a20");
			}
			if (attack.currentFrame >= 551-attackSpeed*.7 && attack.currentFrame <= 560) {
				go = false;
				attack.gotoAndPlay("a21");
			}
			if (attack.currentFrame >= 655-attackSpeed*.7 && attack.currentFrame <= 661) {
				go = false;
				attack.gotoAndPlay("a21");
			}
			////////////////////////
			
			if (go) {
				var turnAttack:Boolean;
				if (control.ctrl_char_attack) {
					
					if (control.ctrl_down) {
						attkDir = 1;
					} else {
						if (control.ctrl_up) {
							attkDir = -1;
							//if (attkIndex_hard > 1) attkIndex_hard = 0;
						} else {
							attkDir = 0;
							if ((scaleX == 1 && control.ctrl_left) || (scaleX == -1 && control.ctrl_right)) {
								turnAttack = true;
							}
						}
					}
					
					if (attkDir == 1) {
						attkIndex_hard ++;
						attkIndex_norm ++;
						switch (attkIndex_hard) {
							case 1: attackString = "a9Delay"; break;
							case 2: attackString = "a10"; break;
							case 3: 
								if (extraAttacks)attackString = "a24";
								else attackString = "a25";
								break;
							//case 4: attackString = "a25"; break;
							default: attackString = "a25"; break;
						}
					}
					if (attkDir == -1) {
						attkIndex_hard ++;
						attkIndex_norm ++;
						switch (attkIndex_hard) {
							case 1: attackString = "a4Delay"; break;
							case 2: 
								if (extraAttacks) attackString = "a7";
								else attackString = "a11"; 
							break;
							case 3: attackString = "a11"; break;
							default: attackString = "a11"; break;
						}
					}
					if (!turnAttack) {
						if (attkDir == 0) {
							attkIndex_norm ++;
							attkIndex_hard ++;
							switch (attkIndex_norm) {
								case 2: attackString = "a2"; break;
								case 3: 
									if (extraAttacks) attackString = "a6";
									else attackString = "a3";
									break;
								case 4:
									attackString = "a3"; break;
								default: attackString = "a3"; break;
							}
						}
					} else {
						if (scaleX == 1 && control.ctrl_left) {
							attackString = "a28";
							scaleX *= -1;
							attkIndex_norm ++;
						} else 
						if (scaleX == -1 && control.ctrl_right) {
							attackString = "a28";
							scaleX *= -1;
							attkIndex_norm ++;
						}
					}
					
					attack.gotoAndPlay(attackString);
					
				} else {
					if (control.ctrl_char_attackPower) {
						if (control.ctrl_down) {
							attack.gotoAndPlay("a5Delay");
						} else {
							if (control.ctrl_up) {
								attack.gotoAndPlay("a27");
							} else {
								attack.gotoAndPlay("a26");
							}
						}
					}
				}
			}
			//Combo ending in Final Power Strike
			if (powerGo) {
				if (control.ctrl_char_attackPower) {
					if (control.ctrl_down) {
						attack.gotoAndPlay("a5Delay");
					} else {
						if (control.ctrl_up) {
							attack.gotoAndPlay("a27");
						} else {
							attack.gotoAndPlay("a26");
						}
					}
				}
			}
		}
	}	
	
	if (!control.ctrl_char_attackPower) {

		if (currentFrameLabel == "attack" && 
			(attack.currentFrameLabel == "charge" || attack.currentFrameLabel == "charge3")) {
			attack.play();
		}
		
	}
	
	if (currentFrameLabel == "attack") {
		if (!checkStep() && onGround) {
			xSpeed *= .5;
		}
		
		if (attack.currentFrame >= 460 && attack.currentFrame <= 464) {
			ySpeed = 1;
		}
	}
}

function damageEnemies():void {
	if (!antiFlinching) {
		var enemiesArr:Array = game.enemiesArr;
		var hitStandard:MovieClip = this[currentFrameLabel].hit;
		var hitUp:MovieClip = this[currentFrameLabel].hit2;
		var hitPower:MovieClip = this[currentFrameLabel].hit3;
		var hitUpPower:MovieClip = this[currentFrameLabel].hit4;
		var hitUpPower2:MovieClip = this[currentFrameLabel].hit5;
		var hitUp2:MovieClip = this[currentFrameLabel].hit6;
		var hitDown:MovieClip = this[currentFrameLabel].hit7;
		var hitUlti:MovieClip = this[currentFrameLabel].hit8;
		
		for (var i:int = 0; i < enemiesArr.length; i ++) {
			var enemy:MovieClip = enemiesArr[i];
			if (enemy && !enemy.dead && enemy.visible && enemy != this) 
			{
				var doDoubleHit:Boolean = false;
				if (canDoubleHit && Math.random() <= doubleHitAmount) doDoubleHit = true;
				
				if (hitStandard && hitStandard.hitTestObject(enemy.bound)) {
					if (overdrive) {
						_root.freezeFrame.attackFreeze(5);
						enemy.takeDamage(this, 6, 5);
						boosterManager.damageEnemy(enemy);
					} else {
						if (canJuggle && enemy.life == enemy.lifeOrig) {
							_root.freezeFrame.attackFreeze(5);
							enemy.takeDamage(this, 6, 14);
							boosterManager.damageEnemy(enemy);
						} else {
							enemy.takeDamage(this, 7, 0);
							boosterManager.damageEnemy(enemy);
						}
					}
					if (doDoubleHit) TweenMax.delayedCall(14, enemy.takeDamage, [this, 6], true);
				}
				
				if (hitUp && hitUp.hitTestObject(enemy.bound)) {
					enemy.takeDamage(this, 6, 15); //X was 10
					boosterManager.damageEnemy(enemy);
					if (doDoubleHit) TweenMax.delayedCall(14, enemy.takeDamage, [this, 5, 15], true);
					if (overdrive) _root.freezeFrame.attackFreeze(10);
				}
				
				if (hitPower && hitPower.hitTestObject(enemy.bound)) {
					enemy.takeDamage(this, 11+(powerStrike), 15, 2+(powerStrike*2));//X was 8 +...
					boosterManager.damageEnemy(enemy);
					if (doDoubleHit) TweenMax.delayedCall(14, enemy.takeDamage, [this, 11+(powerStrike), 15, 2+(powerStrike*2)], true);
					gameData.scorePowerStrike(powerStrike);
					if (overdrive) _root.freezeFrame.attackFreeze(15);
				}
				if (hitUpPower && hitUpPower.hitTestObject(enemy.bound)) {
					enemy.takeDamage(this, 6+powerStrike, 15+(gameData.dataGetWeaponPower()), 2+(powerStrike*2)); //X was 10
					boosterManager.damageEnemy(enemy);
					if (doDoubleHit) TweenMax.delayedCall(14, enemy.takeDamage, [this, 5+powerStrike, 10+(gameData.dataGetWeaponPower()), 2+(powerStrike*2)], true);
					if (overdrive) _root.freezeFrame.attackFreeze(5);
				}
				if (hitUpPower2 && hitUpPower2.hitTestObject(enemy.bound)) {
					enemy.takeDamage(this, 6+powerStrike, 15+(gameData.dataGetWeaponPower()), .25, false);
					boosterManager.damageEnemy(enemy);
					if (overdrive) _root.freezeFrame.attackFreeze(5);
				}
				
				if (hitUp2 && hitUp2.hitTestObject(enemy.bound)) {
					enemy.takeDamage(this, 8, 13); //X was 10
					boosterManager.damageEnemy(enemy);
					if (doDoubleHit) TweenMax.delayedCall(14, enemy.takeDamage, [this, 8, 13], true);
					if (overdrive) _root.freezeFrame.attackFreeze(5);
				}
				if (hitDown && hitDown.hitTestObject(enemy.bound)) {
					enemy.takeDamage(this, 4, -15); //X was 10
					boosterManager.damageEnemy(enemy);
					if (doDoubleHit) TweenMax.delayedCall(14, enemy.takeDamage, [this, 4, -15], true);
					if (overdrive) _root.freezeFrame.attackFreeze(5);
				}
				if (hitUlti && hitUlti.hitTestObject(enemy.bound)) {
					enemy.takeDamage(this, 11+(powerStrike), 15, 5+(powerStrike));//X was 8 +...
					boosterManager.damageEnemy(enemy);
					if (doDoubleHit) TweenMax.delayedCall(14, enemy.takeDamage, [this, 11+(powerStrike), 15, 5+(powerStrike)], true);
					gameData.scorePowerStrike(powerStrike);
					if (overdrive) _root.freezeFrame.attackFreeze(15);
				}
			}
		}
	}
}

function checkStep():Boolean {
	var b:Boolean = false;
	
	if (ground.hitTestPoint(getGlobalX()+(50 * this.scaleX), getGlobalY()+20, true)) {
		b = true;
	} else {
		if (ground.hitTestPoint(getGlobalX()+(50 * this.scaleX), getGlobalY()+60, true)) {
			b = true;
		}
	}
	
	return b;
}

function getWallDist(dir:int):Number {
	var maxDist:Number = 300;
	var i:int = 10;
	
	while (i < maxDist) {
		i += 7;
		if (ground.hitTestPoint(getGlobalX()+(i*dir), getGlobalY()-90, true)) {
			return i;
		}
		if (ground.hitTestPoint(getGlobalX()+(i*dir), getGlobalY()-45, true)) {
			return i;
		}
	}
	return 0;
}

//AntiFlintch - dosen't work on attacks with Y > 0 (those attacks tend to be powerful)
function takeDamage(from:MovieClip, X:Number = 5, Y:Number = 0, damage:Number = 1, unblockable:Boolean = false, canParry:Boolean = true, enemyBlockBounce:Boolean = true):void 
{
	if (currentFrameLabel != "dodge" || (currentFrameLabel == "dodge" && !dodge.dodging)) {
	if (currentFrameLabel != "death" && !game.levelComplete && !reviving && takeDamageOn) {
		if (currentFrameLabel != "block" || (currentFrameLabel == "block" && unblockable)|| (currentFrameLabel == "block" && !heroIsFacing(from))) {
			life -= damage;
			boosterManager.takeDamage();
			lifeRecoverCool = lifeRecoverCoolOrig;
			hurtStunCounter = (23 + (damage*3));
			if (gameData.gameMode == gameData.MULTIPLAYER) {
				particles.addHitSplash(from, this);
				
			}
			/*shitty attempt at a recovery of being swamped by enemies
			if (this.currentFrameLabel == "hurt") {
				if (this.hurt.currentFrame < 13) {
					Y += 8;
					X += 8;
				}
			}
			*/
			if (this.currentFrameLabel == "hurt" && this.hurt && this.hurt.hurt3) {
				if (X < 14) X = 14;
				if (Y < 12) Y = 12;
			}
			
			ySpeed = Y;
			
			if ((canAntiFlinch || canAntiFlinchFORCE || canAntiFlinchCOUNTER) && Y == 0) { 
				xSpeed = (X * from.scaleX) * .4;
			} else {
				xSpeed = X * from.scaleX;
				scaleX = -from.scaleX;
			}
			
			switchToHero();
			if (life <= 0 && Y == 0) {
				sndCtrl.playHitHardSound();
				//if revive is equipt
				if (gameData.dataIsGearEquipt(gameData.data_gear10_name, playerID)) {
					if (!firstDeath) {
						gotoDeath2();
					} else {
						gotoDeath();
					}
				} else {
					gotoDeath();
				}
			} else {
				if (unblockable) sndCtrl.playHitHardSound();
				else sndCtrl.playHitSound();
				
				if ((canAntiFlinch || canAntiFlinchFORCE || canAntiFlinchCOUNTER) && Y == 0) {
					antiFlinch();
				} else {
					
					if (currentFrameLabel == "hurt") {
						if (hurt.hurt1) hurt.gotoAndPlay("hurt2");
						else if (hurt.hurt2) hurt.gotoAndPlay("hurt3");
					} else {
						gotoAndStop("hurt");					
					}
					if (hurt) {
						if (Y > 0) {
							hurt.gotoAndPlay("spin");
						}
					}
					
					if (!onGround || (currentFrameLabel == "hurt" && hurt.recovering)) {
						ySpeed = 7 + (Y*.5);
						xSpeed += xSpeed *.2;
						hurt.gotoAndPlay("spin");
					}	
				}
				
				if (life <= 0) {
					if (!firstDeath) {
						if (gameData.dataIsGearEquipt(gameData.data_gear10_name, playerID)) {
							gotoDeath2();
						} else {
							gotoDeath();
						}
					} else {
						gotoDeath();
					}
				}
				
			}
			sndCtrl.powerStrikeChannel.stop();
			gameData.scoreSubtractDamage(damage);
		} else {
			xSpeed = X*.75 * -scaleX;
			if (enemyBlockBounce)
				from.xSpeed += X * scaleX;
			if (sndCtrl.playDeflectSound) sndCtrl.playDeflectSound();
			particles.addSparks(x+(18 * scaleX), y-53);
			
			if (block) {
				block.gotoAndPlay("defence");
			}
			
			if (block.parry && canParry) {
				xSpeed = X*.75 * scaleX;
				gotoAndStop("attack");
				attack.gotoAndPlay("counter");
				MovieClip(root).freezeFrame.attackFreeze();
			}
			if (blockBreak > 0) {
				blockBreak --;
				trace("Guard :: "+blockBreak+"/"+blockBreakOrig);
			} 
			if (blockBreak <= 0) {
				gotoAndStop("hurt");
				MovieClip(root).freezeFrame.attackFreeze(5);
				takeDamage(from, X, Y, damage, unblockable, canParry, enemyBlockBounce);
				blockBreak = .5;
			}
		}		
	}
	}
}

function heroIsFacing(obj:MovieClip):Boolean {
	if (this.x < obj.x) {
		if (this.scaleX == 1) {
			return true;
		}
	} else {
		if (this.scaleX == -1) {
			return true;
		}
	}
	return false;
}

function blocking():void {
	if (moveable) {
		if (control.ctrl_char_block)
		{
			if (onGround) {
				if (currentFrameLabel == "idle" || currentFrameLabel == "walk" || (currentFrameLabel == "attack" && (!attack.attackStart && !attack.charging)))
				{
					gotoAndStop("block");
				}
			}
		} else {
			if (currentFrameLabel == "block")
			{
				if (block.currentFrameLabel == "blocking") {
					block.gotoAndPlay("back");
				}
			}
		}
	}
}

function jumpControl():void {
	var go:Boolean = false;
	var dir:int = 0;
	//smash bros controls
	if (control.ctrl_char_block || doubleTappedJump) {
		if (control.ctrl_left) {
			if (!jumpFilter1) {
				go = true;
				dir = -1;
				jumpFilter1 = true;
			}
		} else {
			jumpFilter1 = false;
		}
		if (control.ctrl_right) {
			if (!jumpFilter2) {
				go = true;
				dir = 1;
				jumpFilter2 = true;
			}
		} else {
			jumpFilter2 = false;
		}
	} else {
		jumpFilter1 = false;
		jumpFilter2 = false;
	}
	
	if (go && dir != 0 && this.canUpAttackAir) {
		if (this.currentFrameLabel != "dodge") {
			//during falling
			if (this.currentFrameLabel == "walk" && walk && walk.falling ||
				this.currentFrameLabel == "jump" ||
				(this.currentFrameLabel == "attack" && canAntiFlinchCOUNTER)
				|| this.currentFrameLabel == "spinJump") {
				if (jumpIndex <2) {
					jumpIndex ++;
					if (dir == scaleX) {
						gotoAndStop("dodge");
						dodge.gotoAndPlay("dodgeForward"+Number(jumpIndex+1));
					} else {
						gotoAndStop("dodge");
						dodge.gotoAndPlay("dodgeBack"+Number(jumpIndex+1)); 
						this.scaleX = -dir;
					}
				}
			}
			//during hurt fall
			if (this.currentFrameLabel == "hurt" && hurt.spinning && hurtStunCounter <=0) {
				if (jumpIndex <2) {
					jumpIndex ++;
					if (dir == scaleX) {
						gotoAndStop("dodge");
						dodge.gotoAndPlay("dodgeForward"+Number(jumpIndex+1));
					} else {
						gotoAndStop("dodge");
						dodge.gotoAndPlay("dodgeBack"+Number(jumpIndex+1)); 
						this.scaleX = -dir;
					}
				}
			}
			if (this.currentFrameLabel == "attack" && attack && (attack.airDodge || (attack.airborn))) {
				if (jumpIndex <2) {
					jumpIndex ++;
					if (dir == scaleX) {
						attack.stop();
						gotoAndStop("dodge");
						if (dodge) dodge.gotoAndPlay("dodgeForward"+Number(jumpIndex+1));
					} else {
						gotoAndStop("dodge");
						if (dodge) dodge.gotoAndPlay("dodgeBack"+Number(jumpIndex+1)); 
						this.scaleX = -dir;
					}
				}
			}
		} else {
			//during backflip
			if (dodge.currentFrame >= 7 && dodge.currentFrame <= 18) {
				if (dir == scaleX) {
					dodge.gotoAndPlay("dodgeForward2");
				} else {
					dodge.gotoAndPlay("dodgeBack2"); 
					this.scaleX = -dir;
				}
				
			}
			
			//during forward roll
			if (dodge.currentFrame >= 44 && dodge.currentFrame <= 55) {
				if (dir == scaleX) {
					dodge.gotoAndPlay("dodgeForward2");
				} else {
					dodge.gotoAndPlay("dodgeBack2"); 
					this.scaleX = -dir;
				}
				
			}
			
			//during back2
			if (dodge.currentFrame >= 93 && dodge.currentFrame <= 110) {
				if (dir == scaleX) {
					dodge.gotoAndPlay("dodgeForward3");
				} else {
					dodge.gotoAndPlay("dodgeBack3"); 
					this.scaleX = -dir;
				}
			}
			
			//during forward2
			if (dodge.currentFrame >= 123 && dodge.currentFrame <= 136) {
				if (dir == scaleX) {
					dodge.gotoAndPlay("dodgeForward3");
				} else {
					dodge.gotoAndPlay("dodgeBack3"); 
					this.scaleX = -dir;
				}
			}
		}
	}
}
/*
function jumpControlNormal ():void {
	if (control.ctrl_jump) {			
		if (onGround && currentFrameLabel != "hurt") {
			if (boosterManager.canUse(gameData.data_gear9_name)) {
				gotoAndStop("jump");
				ySpeed = 16;
			}
		}
	}
	//wall jump
	if (boosterManager.canUse(gameData.data_gear12_name, false)) {
		if (onLeftWall || onRightWall && !onGround) {
			if (control.ctrl_jump) {
				if (boosterManager.canUse(gameData.data_gear9_name)) {
					if (onLeftWall) scaleX = 1;
					if (onRightWall) scaleX = -1;				
					wallJumpToSpin();
				}
			}
		}
	}
}

function teleportControl ():void {
	if (boosterManager.canUse("Teleport", false)) {
	//if (gameData.dataIsGearEquipt("Teleport", playerID)) {
		if (pointTarget) {
			if (control.ctrl_jump) {
				pointTarget.init(this);			
				pointTarget.update();
			} else {
				pointTarget.end();
			}
		}
	}
		
	if (currentFrameLabel == "teleport") {
		if (teleport.currentFrame == 1) {
			boosterManager.canUse("Teleport");
			xSpeed *= -.1;
			ySpeed *= -.1;
		}
		if (teleport.currentFrameLabel == "teleport") {
			var enableY:Boolean = true;
			var enableX:Boolean = true;
			for (var i:int = 0; i < 20; i ++) {
				if (enableX) x += pointTarget.xDist/20;
				if (enableY) y += pointTarget.yDist/20;
				
				updateOnSurface(30, 30);
				if (onTopWall || onGround) {
					enableY = false;
				}
				if (onLeftWall || onRightWall) {
					enableX = false;
				}
			}
			
			xSpeed = pointTarget.xDist * .04;
			ySpeed = -pointTarget.yDist * .04;
			if (!onGround) {
				ySpeed += (Math.abs(pointTarget.xDist) * .03);
			}
		}
	}
	
}
*/
function wallJumpToSpin() {
	gotoAndStop("idle");
	gotoAndStop("dodge");
	scaleX *= -1;
	if (dodge.currentFrame < 167) {
		dodge.gotoAndPlay("dodgeForward3");
	}
}

function dodgeControl():void {
	var input:Boolean = false;	
	var dir:int = 0;
	
	if (moveable) {
		//CONTROLS
		//Bock + direction
		if ((this.currentFrameLabel == "block" && onGround && block.currentFrame > 2)
			|| (currentFrameLabel == "edge" && edge.canDodge)) {
			if (control.ctrl_char_block) {
				if (control.ctrl_left) {
					input = true;
					dir = -1;
				}
				if (control.ctrl_right) {
					input = true;
					dir = 1;
				}
			}
		}
		//Double Tap
		if (doubleTapIndex > 0) doubleTapIndex --;
		else if (doubleTapIndex < 0) doubleTapIndex ++;
		
		if (this.currentFrameLabel == "idle" || (this.currentFrameLabel == "walk" && !walk.falling && !walk.jumping)) {
			doubleTappedJump = false;
			if (control.ctrl_left) {
				if (!jumpFilter3) {
					if (doubleTapIndex >= 0) {
						doubleTapIndex = -10;
					} else {
						doubleTappedJump = true;
						input = true;
						dir = -1;
						doubleTapIndex = 0;
					}
					jumpFilter3 = true;
				}
			} else {
				jumpFilter3 = false;
			}
			if (control.ctrl_right) {
				if (!jumpFilter4) {
					if (doubleTapIndex <= 0) {
						doubleTapIndex = 10;
					} else {
						doubleTappedJump = true;
						
						input = true;
						dir = 1;
						doubleTapIndex = 0;
					}
					jumpFilter4 = true;
				}
			} else {
				jumpFilter4 = false;
			}
		}
	}
	
	//execute
	if (input) {
		input = false;
		gotoAndStop("dodge");
		
		//Standard Behaviour
		if (dodge) {
			if (scaleX != dir) {
				dodge.gotoAndPlay("dodgeBack");
			} else {
				dodge.gotoAndPlay("dodgeForward");
			}
			xSpeed = 13 * dir;
			//xSpeed = (gameData.dataGetWeaponSpeed(playerID)*.7);
		}
		
	}
	
	//teleport movement
	if (currentFrameLabel == "dodge" && dodge.currentFrameLabel == "teleportMove") {
		var i:int = 0;
		var w:Number = 57;
		var h:Number = 83;
		while (i < 200) {
			i += 10 ;
			if (ground.hitTestPoint(getGlobalX((w+i)*scaleX), getGlobalY(-h), true)) {
				break;
			}
		}
		x += i*scaleX;
	}
}

function recovery():void {
	//hurt moveable recover
	if (hurtStunCounter > 0)
		hurtStunCounter --;
	
	//slope readjust
	if (Math.abs(xSpeed) <= .5 && currentFrameLabel == "idle") {
		idle.gotoAndStop("idle");
	}
	//recovery
	if (onGround) {
		canUpAttackAir = true;
		jumpIndex = 1;
		
		
		if (currentFrameLabel == "hurt" && hurt.spinning) {
			hurt.gotoAndPlay("recover");
			//if (control.ctrl_left) scaleX = 1;
			//if (control.ctrl_right) scaleX = -1;
			
			if (xSpeed > -15 && xSpeed < 15) 
				xSpeed = 8 * scaleX * -1;
			else xSpeed *= .6;
		}
	}
	
	//force idle to death
	if (onGround && life <= 0) {
		if (currentFrameLabel == "idle" || currentFrameLabel == "walk") {
			gotoDeath();
		}
	}
	//from jumpSpin to idle
	if (onGround && currentFrameLabel == "spinJump") {
		gotoAndStop("idle");
	}
	//falling to idle
	if (onGround && currentFrameLabel == "walk" && walk.falling) {
		gotoAndStop("idle");
	}
	
	//dodge
	if (onGround && currentFrameLabel == "dodge") {
		if (dodge.airborn) {
			xSpeed *= .5;
			//gotoAndStop("idle");
			gotoAndStop("land");
			if (onSlope) xSpeed = 0;
		}
	}
	
	//landing airattack on ground
	if (onGround && this.currentFrameLabel == "attack") {
		if (attack && attack.airborn && !attack.forwardPower) {
			xSpeed *= .5;
			gotoAndStop("idle");
		}
	}
	//regular jump land
	if (onGround && this.currentFrameLabel == "jump") {
		if (jump.currentFrame > 2) {
			gotoAndStop("idle");
		}
	}
	
	//Death2 stack (not really a recovery)
	if (onGround && this.currentFrameLabel == "death2") {
		if (this.death2.readyForGround && !this.death2.hitGround) {
			this.death2.gotoAndPlay("stack");
			this.xSpeed *= .5;
		}
	}
	
	if (currentFrameLabel == "dodge") {
		if (dodge.airborn && dodge.attkRoll6) {
			if (onGround) {
				gotoAndStop("idle");
			}
		}
	}
	
	//block recovery
	if (blockBreak < blockBreakOrig) {
		blockBreak += blockBreakRecoverSpeed;
	}
	
	if (this.currentFrameLabel != "attack" && canAntiFlinchCOUNTER) {
		canAntiFlinchCOUNTER = false;
	}
	
	//is sliding
	if (this.currentFrameLabel == "idle" || this.currentFrameLabel == "walk") {
		if (this.idle) {
			if (idle.currentFrame != 1) isSliding = true;
		} else if (this.walk) {
			if (walk.sliding) isSliding = true;
			else isSliding = false;
		}
	} else {
		isSliding = false;
	}
	if (!onSlope && control) {
		if (!control.ctrl_left && !control.ctrl_right) {
			if (Math.abs(xSpeed) >= maxMoveSpeed) {
				if (currentFrameLabel == "idle" || 
					(currentFrameLabel == "walk" && (walk.currentFrameLabel == "slideF" || walk.currentFrameLabel == "slideB" ))) {
					gotoAndStop("walk");
					walk.gotoAndPlay("skid");
				}
			}
		}
	}
}
/*
function startRevive():void {
	var gameData:MovieClip = MovieClip(root);
	var go:Boolean = true;
	if (gameData.gameMode == "MULTIPLAYER") {
		if (gameData.dataIsGearEquipt(gameData.data_gear10_name, playerID)) {
			if (firstDeath) 
				go = false;
		} else {
			go = false;
		}
	}
	
	if (go) {
		reviving = true;
		var lightning:MovieClip = new ReviveLightning();
		var lightningBG:MovieClip = new ReviveLightningBG();
		game.addChildAt(lightning, game.getChildIndex(this) +1);
		game.addChildAt(lightningBG, game.getChildIndex(game.ground));
		
		lightning.x = x; lightning.y = y;
		lightningBG.x = x; lightningBG.y = y;
		
		sndCtrl.playSound(sndCtrl.sndThunder3);
		sndCtrl.playSound(sndCtrl.sndThunder2, 0, .6);
		vcam.shakeCamera(40);
		vcam.zoom = 1; 
		vcam.slowZoom = false;
		
		sndCtrl.musicChannel.stop();
		sndCtrl.playMusic(sndCtrl.currentMusic, true);
		
		TweenMax.delayedCall(35, function () { gotoAndStop("revive");  vcam.shakeCamera(40); }, null, true);
		
		life = 5;	
		TweenMax.to(this, 3, {life:lifeOrig});
	} else {
		
	}
}

function endRevive():void {
	overDriveIndex = overDriveTime;
	overdrive = true;
	firstDeath = true;
	dead = false;
	
	//appy hack stats
	if (maxMoveSpeed < 10) {
		maxMoveSpeed = 10;
		maxMoveSpeedDefault = maxMoveSpeed;
	}
	powerStrikeChargeSpeed = 2;
	
	if (attackSpeed < 12) attackSpeed = 12;
	trace("apply super stats");
	moveable = true;
	reviving = false;
	this.dispatchEvent(new Event("REVIVECOMPLETE"));
}


function handleOverDive():void {
	if (overDriveIndex > 0) {
		overDriveIndex --;
		
		if (overdrive) {
			if (vcam.cameraShake < 10) vcam.cameraShake = 10;
		}
	} else {
		if (overdrive) {
			applyItemStats();
			trace("stats restored");
			overdrive = false;
		}
	}
}
*/

function gotoDeath(impale:Boolean = false):void {
	var gameData:MovieClip = MovieClip(root);
	
	if (gameData.gameMode == "MULTIPLAYER") {
		
		//<to do: make it revive check
		gotoDeath2();
		this.dispatchEvent(new Event("DEFEATED"));
		
	} else {
		if (!dead && !forceDontDie) {
			TweenMax.delayedCall(48, function () {gameCore.transition.gotoAndPlay("DEATH"); }, null, true);
			game.playerKilled();
		}	
		
		gotoAndStop("death");
		if (impale) death.gotoAndPlay("impale");
		vcam.target = this;
		vcam.slowZoom = true;
		vcam.zoom = .6;
		vcam.battleCool = 0;
		vcam.battleZoom = 0;
		dead = true;
	}
}
function gotoDeath2():void {
	if (currentFrameLabel != "death2") {
		gotoAndStop("death2");
		moveable = false;
		
		var gameData:MovieClip = MovieClip(root);
		if (gameData.gameMode == "MULTIPLAYER") {
			if (gameData.dataIsGearEquipt(gameData.data_gear10_name, playerID)) {
				if (firstDeath) 
				death2.gotoAndPlay("multiplayerKill");
			} else {
				death2.gotoAndPlay("multiplayerKill");
			}
		}
		
		vcam.zoom = .6;
		vcam.battleCool = 0;
		vcam.battleZoom = 0;
		vcam.shakeCamera(30);
		vcam.target = this;
		vcam.slowZoom = true;
		MovieClip(root).sky.hudFlash.gotoAndPlay(2);
		dead = true;
		sndCtrl.stopMusic();
	}
}

function switchToEagle():void {
	if (_root.gameMode != _root.SURVIVAL && _root.gameMode != _root.MULTIPLAYER) {
		if (moveable && canSwitchtoEagle) {
			moveable = false;
			eagle.moveable = true;
			eagle.hault = false;
			eagle.isFollowingHero = false;
			MovieClip(root).hud.topLeft.updatePlayerSwitch(true);
			if (!vcam.ignoreEagleSwitch)
				vcam.target = eagle;
			sndCtrl.playSound(sndCtrl.sndEagleVocal);
			canSwitchtoEagle = false;
		}
	}
}

function switchToHero(canMove:Boolean = true, eagleStay:Boolean = false):void {
	if (!moveable && !isUltiStriking) {
		moveable = canMove;
		eagle.moveable = false;
		eagle.isFollowingHero = true;
		eagle.hault = eagleStay;
		MovieClip(root).hud.topLeft.updatePlayerSwitch(false);
		if (!eagleStay) {
			eagle.flightTime = eagle.flightTimeOrig;
		}
		TweenMax.delayedCall(34, function () { canSwitchtoEagle = true; }, null, true);
		if (!vcam.ignoreEagleSwitch)
			vcam.target = this;
	}
}

function lock(dir:int = 0):void {	
	if (!isUltiStriking) {
		active = false;
		moveable = false;
		switchToHero(false);
		xSpeed *= .5;
		if (dir != 0) {
			scaleX = dir;
		}
		if (currentFrameLabel == "attack") {
			gotoAndStop("idle");
		}
		powerStrike = 0;
	}
}
function unlock():void {
	switchToHero();
	active = true;
	moveable = true;
	vcam.target = this;
	vcam.zoom = 1;
}

function antiFlinch():void {
	colorer.changeColor(MovieClip(root).VFXInvert);
	this[currentFrameLabel].stop();
	antiFlinching = true;
	TweenMax.delayedCall(6, antiFlinchOver, null, true);
}
function antiFlinchOver():void {
	colorer.changeColor(MovieClip(root).VFXStyle);
	this[currentFrameLabel].play();
	antiFlinching = false;
}

function getGlobalX(offset:Number = 0):Number {
	var _root:MovieClip = MovieClip(root);
	var _parent:MovieClip = MovieClip(parent);
	return Physics.getGlobalX(_root, _parent, this, offset);
}

function getGlobalY(offset:Number = 0):Number {
	var _root:MovieClip = MovieClip(root);
	var _parent:MovieClip = MovieClip(parent);
	return Physics.getGlobalY(_root, _parent, this, offset);
}

function canClimb():Boolean {
	if ((currentFrameLabel == "dodge" && dodge.airborn) ||
		currentFrameLabel == "jump" ||
		(currentFrameLabel == "walk" && (walk.jumping || walk.falling)) ||
		(currentFrameLabel == "hurt" && (hurt.spinning || hurt.recovering))) {
		return true;
	} else {
		return false;
	}
}

function canPowerAttack():Boolean {
	if (currentFrameLabel == "idle" || 
		currentFrameLabel == "jump" ||
		(currentFrameLabel == "walk" && walk.currentFrame < 34) ||
		(currentFrameLabel == "attack" && attack.airAttack) ||
		currentFrameLabel == "spinJump" ||
		canClimb() ) {
		if (attack && attack.airAttack) attack.airAttack = false;
		return true;
	} else {
		return false
	}
}

function handleIceSpikes ():void {
	if (currentFrameLabel != "attack" ) {
		
	} else {
		if (attack.charging) {
			if (iceSpikeSpawn > 0) {
				iceSpikeSpawn --;
				vcam.zoom = 1.5;
			} else {
				if (iceSpikeCount < iceSpikeMax) {
					iceSpikeCount ++;
					var X:Number = x + ((40 + (Math.random()*(iceSpikeCount*30)))*scaleX);
					var Y:Number = y - (80 + ((iceSpikeCount*25)));
					var iceSpike:MovieClip = particles.addIceSpike(X, Y, 0, 10, 1, this);
					iceSpike.updateController(control);
					iceSpikeArr.push(iceSpike);
					vcam.shakeCamera(iceSpikeCount*10);
					
					iceSpike.clip.scaleX = .2 + ((Math.random()*.8)	*(iceSpikeCount*.2));
					iceSpike.clip.scaleY = .8 + (Math.random()		*(iceSpikeCount*.2));
					iceSpike.bound.width = iceSpike.clip.width;
					iceSpike.bound.height = iceSpike.clip.height;
					
					iceSpikeSpawn = iceSpikeSpawnOrig;
				} else {
					attack.play();
					vcam.zoom = 1;
				}
			}
		}
		
		if (iceSpikeSpawn2 > 0) {
			iceSpikeSpawn2 --;
			//vcam.zoom = 1.5;
		} else {
			if (attack.charging2) {
				if (iceSpikeCount < iceSpikeMax) {
					iceSpikeCount ++;
					X = x + (40*scaleX);
					Y = y - (80 + ((iceSpikeCount*5)));
					iceSpike = particles.addIceSpike(X, Y, 0, 10, 1, this);
					iceSpike.rotation = Math.abs(xSpeed*2.2)*-scaleX;
					iceSpikeArr.push(iceSpike);
					vcam.shakeCamera(iceSpikeCount*10);
					
					iceSpike.clip.scaleX = .2 + ((Math.random()*.8)	*(iceSpikeCount*.2));
					iceSpike.clip.scaleY = .8 + (Math.random()		*(iceSpikeCount*.2));
					iceSpike.bound.width = iceSpike.clip.width;
					iceSpike.bound.height = iceSpike.clip.height;
					
					iceSpikeSpawn2 = iceSpikeSpawn2Orig;
				} 
			}
		}
	}
}
function endIceSpikeAttack():void {
	//called from attack movieclip timeline
	for (var i:int = 0; i < iceSpikeArr.length; i ++) {
		var iceSpike:MovieClip = iceSpikeArr[i];
		
		if (iceSpike) {
			iceSpike.drop(i);
		}
	}
	iceSpikeArr = [];
	iceSpikeCount = 0;
	vcam.zoom = 1;
}
function shootIceSpikeBooster():void {
	if (boosterManager.canUse("Ice Spikes")) {
		sndCtrl.playSound(sndCtrl.sndIceShot);
		var X:Number = x - ((20*scaleX)*Math.random());
		var Y:Number = y - 30 - ((bound.height*.4)*Math.random());
		var iceSpike:MovieClip = particles.addIceSpike(X, Y, 0, 10, 1, this);
		
		//iceSpike.updateController(control);
		//iceSpikeArr.push(iceSpike);
		vcam.shakeCamera(20);
		
		iceSpike.scaleX = scaleX;
		iceSpike.scaleY = scaleX;
		iceSpike.rotation = (88 + (4*Math.random()))*scaleX;
		iceSpike.clip.width = 9;
		iceSpike.clip.height = 80;
		iceSpike.bound.width = iceSpike.clip.width;
		iceSpike.bound.height = iceSpike.clip.height;
		iceSpike.xSpeed = 35*scaleX;
		iceSpike.gravityOn = true;
		iceSpike.ySpeed = 90-Math.abs(iceSpike.rotation);
		iceSpike.slowFall = true;
		iceSpike.control = null;
		iceSpike.master = this;
		
		
	}
}

function lightningStrike ():void {
	var clip:MovieClip = new VandheerLightingStrike();
	game.addChild(clip);
	clip.x = x;
	clip.y = y;
	clip.init(false, this);
}

function kill ():void {
	if (boosterManager) {
		removeChild(boosterManager);
		boosterManager = null;
	}
	
	removeChild(colorer);
	
	colorer = null;
	ground = null;
	eagle = null;
	control = null;
	_root = null;
	sndCtrl = null;
	gameCore = null;
	game = null;
	vcam = null;
	particles = null;
	gameData = null;
	
	trace("kill hero "+heroName);
}]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
            <DOMFrame index="1" duration="20" keyMode="9728">
              <Actionscript>
                <script><![CDATA[stop();]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="colorer" color="#009999" autoNamed="false">
          <frames>
            <DOMFrame index="0" duration="21" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Objects/OBJ-Colorer-GameObject" name="colorer">
                  <matrix>
                    <Matrix tx="1.7" ty="-93.85"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="-0.05"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="strikeCounter" color="#9933CC" autoNamed="false">
          <frames>
            <DOMFrame index="0" duration="21" keyMode="9728">
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="labels" color="#FF4FFF" autoNamed="false">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements/>
            </DOMFrame>
            <DOMFrame index="1" name="idle" labelType="name" keyMode="9728">
              <elements/>
            </DOMFrame>
            <DOMFrame index="2" name="walk" labelType="name" keyMode="9728">
              <elements/>
            </DOMFrame>
            <DOMFrame index="3" name="block" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
            <DOMFrame index="4" name="attack" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
            <DOMFrame index="5" name="throw" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
            <DOMFrame index="6" name="hurt" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
            <DOMFrame index="7" name="climb" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
            <DOMFrame index="8" name="death" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
            <DOMFrame index="9" name="edge" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
            <DOMFrame index="10" name="dodge" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
            <DOMFrame index="11" name="rise" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
            <DOMFrame index="12" name="spinJump" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
            <DOMFrame index="13" name="kneel" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
            <DOMFrame index="14" name="land" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
            <DOMFrame index="15" name="convo0" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
            <DOMFrame index="16" name="jump" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
            <DOMFrame index="17" name="death2" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
            <DOMFrame index="18" name="revive" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
            <DOMFrame index="19" name="mutliplayerAnims" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
            <DOMFrame index="20" name="teleport" labelType="name" motionTweenScale="false" keyMode="8192">
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="clip" color="#4F80FF" autoNamed="false">
          <frames>
            <DOMFrame index="0" duration="2" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/Vandheer2-Anim-Idle" name="idle">
                  <matrix>
                    <Matrix tx="6.2" ty="1"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-46"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="2" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/Vanheer2-Walk" name="walk" centerPoint3DX="-74.45" centerPoint3DY="-5.35">
                  <matrix>
                    <Matrix tx="-1.4" ty="1.25"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="7.5" y="-46"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="3" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/Vandheer2-Block" name="block">
                  <matrix>
                    <Matrix tx="-4.95" ty="1.8"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="6.45" y="-43.3"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="4" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/Vandheer2-Attack" name="attack" centerPoint3DX="-66.95" centerPoint3DY="-36.2">
                  <matrix>
                    <Matrix a="0.998580932617188" d="0.998580932617188" tx="-2.7" ty="-35.65"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="5" keyMode="9728">
              <elements/>
            </DOMFrame>
            <DOMFrame index="6" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/Vandheer2-Hurt" name="hurt">
                  <matrix>
                    <Matrix tx="1.8" ty="1.05"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-42.95"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="7" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/anims/Vandheer2-Anim-Climb2" name="climb" centerPoint3DX="-9.45" centerPoint3DY="-46.85">
                  <matrix>
                    <Matrix a="1.11328125" d="1.11328125" tx="-2.05" ty="-0.25"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="-6.7" y="-41.6"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="8" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/Vandheer2-Death" name="death">
                  <matrix>
                    <Matrix tx="-3.55" ty="-0.5"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-10.1"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="9" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/Vandheer2-Climb" name="edge">
                  <matrix>
                    <Matrix tx="-0.75" ty="0.5"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="10" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/Vandheer2-Dodge" name="dodge">
                  <matrix>
                    <Matrix tx="73" ty="2.5"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="-5" y="-50"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="11" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/Vandheer2-Rise" name="rise">
                  <matrix>
                    <Matrix tx="0.05" ty="0.25"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-10.35"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="12" keyMode="9728">
              <elements>
                <DOMBitmapInstance libraryItemName="Objects/_BoomProjectile/OBJ-Boom-bitmap2"/>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/Vandheer2-SpinJump" name="spinJump">
                  <matrix>
                    <Matrix a="0.855072021484375" d="0.855072021484375" tx="-0.2" ty="0.15"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-9.75"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="13" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/Vandheer2-Rise" name="kneel">
                  <matrix>
                    <Matrix tx="0.05" ty="0.25"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-10.35"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="14" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/anims/Vandheer2-anim-Skid2" name="land">
                  <matrix>
                    <Matrix tx="-15.7" ty="-34.45"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="-0.05" y="-0.05"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="15" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/Vandheer2-Anim-Idle" name="convo0">
                  <matrix>
                    <Matrix tx="6.2" ty="1"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-46"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="16" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/Vandheer2-anim-jumpNormal" name="jump">
                  <matrix>
                    <Matrix tx="-0.75" ty="1"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="17" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/Vandheer2-Death2" name="death2">
                  <matrix>
                    <Matrix tx="-0.3" ty="-0.3"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="18" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/Vandheer2-Revive" name="revive">
                  <matrix>
                    <Matrix tx="6.2" ty="-44.95"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-0.05"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="19" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-Vandheer/assets/Vandheer2-Anim-Getup2" name="mutliplayerAnims">
                  <matrix>
                    <Matrix ty="-1.7"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="-0.05"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
            <DOMFrame index="20" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Characters/Player-LoneWarrior/Assets/LW-TeleportBooster" name="teleport">
                  <matrix>
                    <Matrix tx="-2.8" ty="-11.25"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="-0.05"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="bound" color="#FF800A" autoNamed="false">
          <frames>
            <DOMFrame index="0" duration="21" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="Objects/OBJ-Bound" name="bound">
                  <matrix>
                    <Matrix tx="0.05" ty="-45.55"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="-0.05"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>