<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="UI/UI-MultiPlayerMenu/UI-MultiPlayer-container" itemID="575d4953-00000b29" lastModified="1500989976" lastUniqueIdentifier="6">
  <timeline>
    <DOMTimeline name="UI-MultiPlayer-container">
      <layers>
        <DOMLayer name="Layer 2" color="#9933CC" current="true" isSelected="true">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <Actionscript breakpoints="374">
                <script><![CDATA[import flash.display.MovieClip;

var ctrl:PlayerControl;
var sndCtrl:MovieClip;
var menuRoot:UIMultiPlayer;
var _root:MovieClip;

var currentPanel:MovieClip;

var keyFilter1:Boolean;
var keyFilter2:Boolean;
var keyFilter3:Boolean;
var keyFilter4:Boolean;
var keyFilter5:Boolean;
var keyFilter6:Boolean;
var keyFilter7:Boolean;

var inGame:Boolean;
var equiptPanelOpen:Boolean;

var playerID:int;
var horizontalIndex:Number;
var verticalIndex:Number;

var linkedBoosters:Array;
var currentPanels:Array = new Array();
var activeBoosterSlots:int;

function init (_playerID:int, _menuRoot:UIMultiPlayer, _ctrl:PlayerControl):void {
	playerID = _playerID;
	ctrl = _ctrl;
	
	sndCtrl = MovieClip(root);
	_root = MovieClip(root);
	menuRoot = _menuRoot;
	
	keyFilter1 = true;
	keyFilter2 = true;
	keyFilter3 = true;
	keyFilter4 = true;
	keyFilter5 = true;
	keyFilter6 = true;
	keyFilter7 = true;
	
	verticalIndex = 0;
	horizontalIndex = 1;
	
	if (currentPanel) {
		selectPanel(currentPanel);
	} else {
		selectPanel(panelWeapons);
	}
	panelWeapons.clip.init(playerID);
	
	panelEquiptment0.clip.multiplayerInit();
	panelEquiptment1.clip.multiplayerInit();
	panelEquiptment2.clip.multiplayerInit();
	panelEquiptment3.clip.multiplayerInit();
	
	updateBoosterSlots();
}

function update ():void {
	control();
	cursor.update();
}

function control():void {
	var input:Boolean = false;
	var openWeapons:Boolean = false;
	var openGear:Boolean = false;
	var openCharacter:Boolean = false;
	
	//Index controls/////////////////////////////////////////////////////
		//UP control//--------------------------------------------------//
		if (ctrl.ctrl_up) {
			if (!keyFilter1) {
				if (verticalIndex > 0 && horizontalIndex >= 1) {
					verticalIndex--;
					
					/*handle booster arrangment*/
					if (activeBoosterSlots == 0) {
						verticalIndex = 0;
					} else {
						if (verticalIndex == 1 && horizontalIndex > activeBoosterSlots) horizontalIndex = activeBoosterSlots;
					}
					sndCtrl.playUISound(sndCtrl.sndButton1);
					input = true;
				}
				keyFilter1 = true;
			}
		} else { keyFilter1 = false; }
		//DOWN control//--------------------------------------------------//
		if (ctrl.ctrl_down) {
			if (!keyFilter2) {
				if (verticalIndex < 2 && horizontalIndex >= 1) {
					verticalIndex ++;
					/*handle booster arrangment*/
					if (activeBoosterSlots == 0) {
						verticalIndex = 2;
					} else {
						if (verticalIndex == 1 && horizontalIndex > activeBoosterSlots) horizontalIndex = activeBoosterSlots;
					}
					sndCtrl.playUISound(sndCtrl.sndButton1);
					input = true;
				}
				if (verticalIndex == 2 && horizontalIndex > 2)
					horizontalIndex = 2;
				keyFilter2 = true;
			}
		} else { keyFilter2 = false; };
		//LEFT control//--------------------------------------------------//
		if (ctrl.ctrl_left) {
			if (!keyFilter3) {
				if (verticalIndex == 1) {
					if (horizontalIndex > 0) {
						horizontalIndex --;
						if (horizontalIndex > activeBoosterSlots) 
							horizontalIndex = activeBoosterSlots;
						sndCtrl.playUISound(sndCtrl.sndButton1);
						input = true;
					}
				} else {
					if (verticalIndex == 2) {
						if (horizontalIndex > 1) {
							horizontalIndex --;
							sndCtrl.playUISound(sndCtrl.sndButton1);
							input = true;
						}
					} else {
						if (horizontalIndex > 1) {
							horizontalIndex = 1;
							sndCtrl.playUISound(sndCtrl.sndButton1);
							input = true;
						}
					}
				}
				keyFilter3 = true;
			}
		} else { keyFilter3 = false; };
		//RIGHT control//--------------------------------------------------//
		if (ctrl.ctrl_right) {
			if (!keyFilter4) {
				if (verticalIndex == 1) {
					if (horizontalIndex < activeBoosterSlots) {
						horizontalIndex ++;
						sndCtrl.playUISound(sndCtrl.sndButton1);
						input = true;
					}
				} else {
					if (verticalIndex == 2) {
						if (horizontalIndex < 2) {
							horizontalIndex ++;
							sndCtrl.playUISound(sndCtrl.sndButton1);
							input = true;
						}
					} else {
						if (horizontalIndex < 1) {
							horizontalIndex ++;
							if (verticalIndex == 1 && activeBoosterSlots == 0) verticalIndex = 0;
							sndCtrl.playUISound(sndCtrl.sndButton1);
							input = true;
						}
					}
				}
				keyFilter4 = true;
			}
		} else { keyFilter4 = false; };
	//////////////////////////////////////////////////////////////////////
	
	//////////////////////////////////////////////////////////////////////
	//HIGHLIGHT PANEL//--------------------------------------------------//
	if (input) {
		if (horizontalIndex > 0) {
			//RIGHT HALF
			switch (verticalIndex) {
				case 0:
					selectPanel(panelWeapons);
					break;
				case 1:
					if (horizontalIndex == 1) selectPanel(panelEquiptment0);
					if (horizontalIndex == 2) selectPanel(panelEquiptment1);
					if (horizontalIndex == 3) selectPanel(panelEquiptment2);
					if (horizontalIndex == 4) selectPanel(panelEquiptment3);
					break;
				case 2:
					if (horizontalIndex == 1) selectPanel(cancelButton);
					if (horizontalIndex == 2) selectPanel(startButton);
					break;
			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////
	//CONFIRM SELECTION//-----------------------------------------------//
		if (ctrl.ctrl_confirm) {
			if (!keyFilter5) {
				if (horizontalIndex == 2 && verticalIndex == 2) {
					if (inGame) {
						exit(2);
					} else {
						exit(0);
					}
				} 
				if (horizontalIndex == 1 && verticalIndex == 2) {
					if (inGame) {
						exit(3);
					} else {
						exit(1);
					}
				} 
				if (horizontalIndex >= 1 && verticalIndex == 0) {
					if (!equiptPanelOpen) openWeaponsPanel();
					openWeapons = true;
				}
				if (horizontalIndex >= 1 && verticalIndex == 1) {
					if (!equiptPanelOpen) {
						if (MovieClip(this["panelEquiptment"+(horizontalIndex-1)]).clip.unchangable) {
							//openGearLockedPanel(horizontalIndex-1);
							sndCtrl.playSound(sndCtrl.sndButton1);
						} else {
							openGearPanel(horizontalIndex-1);
							openGear = true;
						}
					}
				}
				if (horizontalIndex == 0) {
					if (!equiptPanelOpen) openCharacterPanel();
					openCharacter = true;
				}
				keyFilter5 = true;
			}
		} else {
			keyFilter5 = false;
		}	
	
	//////////////////////////////////////////////////////////////////////
	//CANEL BUTTON//----------------------------------------------------//
	if (ctrl.ctrl_cancel) {
		if (!keyFilter6) {
			if (currentPanel == cancelButton) {
				if (inGame) {
					exit(3);
				} else {
					exit(1);
				}
			} else {
				verticalIndex = 2;
				horizontalIndex = 1;
				selectPanel(cancelButton);
				sndCtrl.playUISound(sndCtrl.sndButton2);
			}
			keyFilter6 = true;
		}
	} else {
		keyFilter6 = false;
	}
	//////////////////////////////////////////////////////////////////////
	
	//////////////////////////////////////////////////////////////////////
	//START BUTTON//----------------------------------------------------//
	if (ctrl.ctrl_start) {
		if (!keyFilter7) {
			if (currentPanel == startButton) {
				if (inGame) {
					exit(2);
				} else {
					exit(0);
				}
			} else {
				verticalIndex = 2;
				horizontalIndex = 2;
				selectPanel(startButton);
				sndCtrl.playUISound(sndCtrl.sndButton1);
			}
			keyFilter7 = true;
		}
	} else {
		keyFilter7 = false;
	}
	
}

/*
function selectPanel(panel:MovieClip):void {
	if (currentPanel) {
		currentPanel.gotoAndPlay("out");
	}
	currentPanel = panel;
	currentPanel.gotoAndPlay("over");
}*/

function openWeaponsPanel ():void {
	menuRoot.displayPanel(menuRoot.equiptWeaponPanel);
}

function openGearPanel (id:Number):void {
	var _ability:Boolean;
	if (_root.dataGetWeaponBoosters(playerID)[id][1]) _ability = true;
	
	menuRoot.openGearSlot(id, _ability);
	//menuRoot.displayPanel(menuRoot.equiptGearPanel);
}

function openCharacterPanel ():void {
	
}

function exit(id:Number):void {
	switch (id) {
		case 1:
			menuRoot.backtoCharacter();
		break;
		default:
			//menuRoot.gotoGame();
			menuRoot.readyWaiting();
		break;
	}
	
}

function updateBoosterSlots():void {
	linkedBoosters = [];
	chain0.visible = false;
	chain1.visible = false;
	chain2.visible = false;
	chain3.visible = false;
	
	var s:String = "";
	if (playerID == 2) s = "_p2"; 
	
	activeBoosterSlots = _root.dataGetWeaponBoosters(playerID).length;
	trace("This Weapon has :: "+activeBoosterSlots+" slots");
	for (var i:int = 0; i < 4; i ++) {
		var panel:MovieClip = MovieClip(this["panelEquiptment"+i]);
		panel.clip.displayNewEquippedListing("NONE");
		if (i >= activeBoosterSlots) {
			//turn off
			panel.clip.gearIcon.gotoAndStop(1);
			panel.visible = false;
			menuRoot["local_equiptedGear"+i] = 0;
			panel.clip.unchangable = false;
		} else {
			//choose ability booster frame
			if (_root.dataGetWeaponBoosters(playerID)[i][1]) {
				panel.clip.gotoAndStop(2+i);
			} else {
				panel.clip.gotoAndStop(1);
			}
			//if weapon booster is open
			if (_root.dataGetWeaponBoosters(playerID)[i][0] == 0) {
				panel.clip.unchangable = false;
				panel.visible = true;
				
				//clear stacking boosters
				/*
				var currID:int = _root.dataGetWeaponBoosters(0)[i][0];
				for (var i2:int = 0; i2 < activeBoosterSlots; i2 ++) {
					if (i2 != i) {
						if (_root.dataGetWeaponBoosters(0)[i2][0] == currID) {
							panel.clip.gearIcon.gotoAndStop(1);
							_root["data_equiptedGear"+i] = 0;
							panel.clip.unchangable = false;
							break;
						}
					}
				}
				*/
			//if weapon booster is defined
			} else {
				panel.visible = true;
				menuRoot["local_equiptedGear"+i] = _root.dataGetWeaponBoosters(playerID)[i][0];
				panel.clip.gearIcon.gotoAndStop(1+_root.dataGetWeaponBoosters(playerID)[i][0]);
				panel.clip.updateName(menuRoot["local_equiptedGear"+i]);
				panel.clip.unchangable = true;
				this["chain"+i].visible = true;
				linkedBoosters.push(panel);
			}
			
		}
	}
	//apply saved boosters
	//get the weapons saved booster list
	if (playerID != 2) {
		var assignedBoosters:Array = _root["data_weap"+(menuRoot["local_equiptedWeapon"])+"_assignedBoosters"][0];
		for (i = 0; i < _root.dataGetWeaponBoosters(playerID).length; i ++) {
			if (_root.dataGetWeaponBoosters(playerID)[i][0] == 0) {
				menuRoot["local_equiptedGear"+i] = assignedBoosters[i];
				this["panelEquiptment"+i].clip.gearIcon.gotoAndStop(1+assignedBoosters[i]);
				this["panelEquiptment"+i].clip.updateName(assignedBoosters[i]);
			}
		}
	}
	selectPanel(panelWeapons, true);
}

function selectPanel(panel:MovieClip, fix:Boolean = false):void {
	if (isInChain(panel)) {
		if (currentPanel && !isInChain(currentPanel)) {
			currentPanel.gotoAndPlay("out");
		}
		currentPanel = panel;
		for (var i = 0; i < currentPanels.length; i ++) {
			if (currentPanels[i].currentFrame == 1 || currentPanels[i].currentFrame >= 11)
				currentPanels[i].gotoAndPlay("over");
		}
		for (i = 0; i < activeBoosterSlots; i ++) {
			var clip:MovieClip = this["panelEquiptment"+i];
			if (isInChain(clip)) {
				
			} else {
				if (clip.currentFrame != 1)
				clip.gotoAndPlay("out")
			}
		}
	} else {
		for (i = 0; i < currentPanels.length; i ++) {
			if (currentPanels[i].currentFrame != 1)
				currentPanels[i].gotoAndPlay("out");
		}
		if (currentPanel) {
			currentPanel.gotoAndPlay("out");
		}
		currentPanel = panel;
		currentPanel.gotoAndPlay("over");
	}
}
function isInChain(panel:MovieClip):Boolean {
	currentPanels = [];
	currentPanels.push(panelWeapons);
	if (linkedBoosters) {
		for (var i:int = 0; i < linkedBoosters.length; i ++) {
			currentPanels.push(linkedBoosters[i]);
		}
		for (i = 0; i < currentPanels.length; i ++) {
			if (panel == currentPanels[i]) {
				return true;
			}
		}
	}
	return false;
}
]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 3" color="#FF800A">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="UI/UI-Player/UI-Player-Cursor" name="cursor">
                  <matrix>
                    <Matrix tx="-135.55" ty="-37"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="-2.45" y="2.45"/>
                  </transformationPoint>
                  <filters>
                    <DropShadowFilter blurX="4" blurY="4" distance="3" quality="2" strength="0.83"/>
                    <GlowFilter color="#FFFFFF" quality="3" strength="0.44"/>
                  </filters>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 4" color="#FF4FFF">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="UI/UI-Player/assets/UI-Player-Chained" name="chain0">
                  <matrix>
                    <Matrix a="0" b="-1" c="1" d="0" tx="-93.05" ty="-9"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <filters>
                    <GlowFilter blurX="13" blurY="13" color="#FFFFFF" strength="0.69"/>
                  </filters>
                </DOMSymbolInstance>
                <DOMSymbolInstance libraryItemName="UI/UI-Player/assets/UI-Player-Chained" name="chain1">
                  <matrix>
                    <Matrix a="0" b="-1" c="1" d="0" tx="10.95" ty="-9"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <filters>
                    <GlowFilter blurX="13" blurY="13" color="#FFFFFF" strength="0.69"/>
                  </filters>
                </DOMSymbolInstance>
                <DOMSymbolInstance libraryItemName="UI/UI-Player/assets/UI-Player-Chained" name="chain2">
                  <matrix>
                    <Matrix a="0" b="-1" c="1" d="0" tx="120.95" ty="-9"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <filters>
                    <GlowFilter blurX="13" blurY="13" color="#FFFFFF" strength="0.69"/>
                  </filters>
                </DOMSymbolInstance>
                <DOMSymbolInstance libraryItemName="UI/UI-Player/assets/UI-Player-Chained" name="chain3">
                  <matrix>
                    <Matrix a="0" b="-1" c="1" d="0" tx="230" ty="-9"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <filters>
                    <GlowFilter blurX="13" blurY="13" color="#FFFFFF" strength="0.69"/>
                  </filters>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 1" color="#4F80FF">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="UI/UI-Player/UI-Player-WeaponStats-Container" name="panelWeapons">
                  <matrix>
                    <Matrix tx="66.3" ty="-134.95"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="1.2" y="23.7"/>
                  </transformationPoint>
                </DOMSymbolInstance>
                <DOMComponentInstance libraryItemName="UI/UI-Player/UI-Player-Equiptment-Container" name="panelEquiptment0" uniqueID="1">
                  <matrix>
                    <Matrix tx="-95.7" ty="69.85"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="0.15" y="-2.1"/>
                  </transformationPoint>
                  <parametersAsXML><![CDATA[   <property id="gearSlotID">
      <Inspectable name="gearSlotID" variable="gearSlotID" category="" verbose="0" defaultValue="0" type="Number"/>
   </property>
]]></parametersAsXML>
                </DOMComponentInstance>
                <DOMComponentInstance libraryItemName="UI/UI-Btn-Thin/UI-Btn-Thin" name="startButton" uniqueID="2">
                  <matrix>
                    <Matrix a="0.879638671875" tx="160.8" ty="202.35"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="-0.4"/>
                  </transformationPoint>
                  <color>
                    <Color brightness="0.21"/>
                  </color>
                  <parametersAsXML><![CDATA[   <property id="label">
      <Inspectable name="label" variable="label" category="" verbose="0" defaultValue="start game" type="String"/>
   </property>
]]></parametersAsXML>
                </DOMComponentInstance>
                <DOMComponentInstance libraryItemName="UI/UI-Player/UI-Player-Equiptment-Container" name="panelEquiptment1" uniqueID="3">
                  <matrix>
                    <Matrix tx="12.4" ty="69.85"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="0.15" y="-2.1"/>
                  </transformationPoint>
                  <parametersAsXML><![CDATA[   <property id="gearSlotID">
      <Inspectable name="gearSlotID" variable="gearSlotID" category="" verbose="0" defaultValue="1" type="Number"/>
   </property>
]]></parametersAsXML>
                </DOMComponentInstance>
                <DOMComponentInstance libraryItemName="UI/UI-Player/UI-Player-Equiptment-Container" name="panelEquiptment2" uniqueID="4">
                  <matrix>
                    <Matrix tx="120.65" ty="69.85"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="0.15" y="-2.1"/>
                  </transformationPoint>
                  <parametersAsXML><![CDATA[   <property id="gearSlotID">
      <Inspectable name="gearSlotID" variable="gearSlotID" category="" verbose="0" defaultValue="2" type="Number"/>
   </property>
]]></parametersAsXML>
                </DOMComponentInstance>
                <DOMComponentInstance libraryItemName="UI/UI-Player/UI-Player-Equiptment-Container" name="panelEquiptment3" uniqueID="5">
                  <matrix>
                    <Matrix tx="229.25" ty="69.85"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="0.15" y="-2.1"/>
                  </transformationPoint>
                  <parametersAsXML><![CDATA[   <property id="gearSlotID">
      <Inspectable name="gearSlotID" variable="gearSlotID" category="" verbose="0" defaultValue="3" type="Number"/>
   </property>
]]></parametersAsXML>
                </DOMComponentInstance>
                <DOMComponentInstance libraryItemName="UI/UI-Btn-Thin/UI-Btn-Thin-short-Black" name="cancelButton" uniqueID="6">
                  <matrix>
                    <Matrix a="0.879638671875" tx="-63.65" ty="201.9"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-1.9"/>
                  </transformationPoint>
                  <parametersAsXML><![CDATA[   <property id="label">
      <Inspectable name="label" variable="label" category="" verbose="0" defaultValue="back" type="String"/>
   </property>
]]></parametersAsXML>
                </DOMComponentInstance>
                <DOMSymbolInstance libraryItemName="UI/UI-Player/assets/UI-Equipt-Label2" name="txt1">
                  <matrix>
                    <Matrix tx="62.85" ty="-215.65"/>
                  </matrix>
                  <transformationPoint>
                    <Point y="-1.5"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>