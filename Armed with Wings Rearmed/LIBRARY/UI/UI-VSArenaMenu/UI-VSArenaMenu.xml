<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="UI/UI-VSArenaMenu/UI-VSArenaMenu" itemID="5818760e-000016c3" lastModified="1508842893" lastUniqueIdentifier="3">
  <timeline>
    <DOMTimeline name="UI-VSArenaMenu" guides='&lt;guidelines&gt;&lt;guideline direction="h"&gt;-536&lt;/guideline&gt;&lt;/guidelines&gt;'>
      <layers>
        <DOMLayer name="actions" color="#FF4FFF" current="true" isSelected="true" autoNamed="false">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <Actionscript>
                <script><![CDATA[//hook1
import flash.display.MovieClip;
import com.greensock.TweenMax;
import com.greensock.easing.Strong;

visible = false;

var ready:Boolean;
var go:Boolean;

var selectIndex:Number;
var selectMax:Number;
var currentSelClip:MovieClip;

var keyFilter0:Boolean;
var keyFilter1:Boolean;
var keyFilter2:Boolean;
var keyFilter3:Boolean;

//break peroid of no input.
var breakIndex:int = 15;
var breakIndexOrig:int = 15;

var arenaSelected:Boolean;
var difficultySelected:Boolean;

var container:MovieClip;
var readyBtn:MovieClip;
var ctrl:MovieClip;
var sndCtrl:MovieClip;
var _parent:MovieClip;
var _root:MovieClip;

function init ():void {
	visible = true;
	x = 0;
	y = 0;
	
	ready = true;
	go = true;
	
	selectIndex = 0;
	selectMax = 3;
	currentSelClip = container.b0;
	breakIndex = breakIndexOrig;
	
	titleClip.x = -480;
	titleClip.y = 68;
	container.x = -960;
	container.y = 316.5;
	readyBtn.visible = false;
	
	ctrl = MovieClip(root).player1Control;
	sndCtrl = MovieClip(root);
	_parent = MovieClip(parent);
	_root = MovieClip(root);
	
	selectButton();
}

function update ():void {
	if (go) {
		if (breakIndex > 0) {
			breakIndex --;
		} else {
			//ctrl back
			if (ctrl.ctrl_cancel) {
				if (!keyFilter0) {
					
						if (!arenaSelected) {
							sndCtrl.playUISound(sndCtrl.sndButton2);
							_parent.closeVSArena();
							go = false;
						}
					
				
					keyFilter0 = true;
				}
			} else {
				keyFilter0 = false;
			}
			
			//ctrl left
			if (!arenaSelected) {
				if (ctrl.ctrl_right) {
					if (!keyFilter1) {
						if (selectIndex < selectMax) {
							selectIndex ++;
							selectButton();
						}
						keyFilter1 = true;
					}
				} else {
					keyFilter1 = false;
				}
				//ctrl right
				if (ctrl.ctrl_left) {
					if (!keyFilter2) {
						if (selectIndex > 0) {
							selectIndex --;
							selectButton();
						}
						keyFilter2 = true;
					}
				} else {
					keyFilter2 = false;
				}
			}
			
			//ctrl confirm
			if (ctrl.ctrl_confirmStart) {
				if (!keyFilter3) {
						sndCtrl.playUISound(sndCtrl.sndButton3);
						_root.gameMode = _root.MULTIPLAYER;
						_root.sessionVSArena = container["b"+selectIndex].id;
						_root.sessionVSTournament = false;
					
						switch (_root.sessionVSArena) {
							case 0:
								_root.sessionVSRounds = 3;
							break;
							case 1:
								_root.sessionVSTournament = true;
								_root.sessionVSRounds = 2;
							break
							case 2:
								_root.sessionVSRounds = 2;
							break;
							case 3:
								_root.sessionVSRounds = 1;
							break;
						}
						/*
						if (_root.sessionVSArena == 1) {
							_root.sessionVSTournament = true;
						} else {
							_root.sessionVSTournament = false;
						}
						*/
						
						_parent.transition.gotoAndPlay(2);
						currentSelClip.gotoAndPlay("hit");
						go = false;
					
					keyFilter3 = true;
				}
			} else {
				keyFilter3 = false;
			}
		}
		
		//scroll container
		if (arenaSelected) {
			if (difficultySelected) {
				container.y += (220 - container.y)/6;
				container.x += ((480 + (-selectIndex*600)-160) - container.x)/4;
			} else {
				container.y += (299 - container.y)/6;
				container.x += ((480 + (-selectIndex*600)-160) - container.x)/4;
			}
			
			container.updateVisibility(true, currentSelClip);
		} else {
			container.y += (316 - container.y)/6;
			container.x += ((480 + (-selectIndex*600)) - container.x)/10;
			container.updateVisibility(false, currentSelClip);
		}
		
		titleClip.x += ((((container.x-480)*.1) + 480) - titleClip.x)/5;
		titleClip.y = 68 + ((container.y-316.5)*1.2);
		
	}	
}

function confirming():Boolean {
	return readyBtn.visible;
}

function selectButton():void {
	if (currentSelClip) {
		//currentSelClip.gotoAndPlay("out");
	}
	currentSelClip = container["b"+selectIndex];
	currentSelClip.gotoAndPlay("over");
	container.addChild(currentSelClip);
	
	sndCtrl.playUISound(sndCtrl.sndButton1);
}

function closeDifficulty():void {
	arenaSelected = false;
	keyFilter0 = true;	
	keyFilter1 = true;	
	keyFilter2 = true;	
	keyFilter3 = true;	
}

function selectDifficulty(id:Number):void {
	readyBtn.visible = true;
	readyBtn.gotoAndPlay("over");
	difficultySelected = true;
	keyFilter0 = true;	
	keyFilter1 = true;	
	keyFilter2 = true;	
	keyFilter3 = true;	
}]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="boarder" color="#9933CC" autoNamed="false" layerType="guide">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMShape>
                  <strokes>
                    <StrokeStyle index="1">
                      <SolidStroke scaleMode="normal">
                        <fill>
                          <SolidColor color="#FF0000"/>
                        </fill>
                      </SolidStroke>
                    </StrokeStyle>
                  </strokes>
                  <edges>
                    <Edge strokeStyle="1" edges="!0 0|19200 0!19200 0|19200 10800!19200 10800|0 10800!0 10800|0 0"/>
                  </edges>
                </DOMShape>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 5" color="#009999">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMComponentInstance libraryItemName="UI/UI-Btn-Thin/UI-Btn-Thin" name="readyBtn" uniqueID="3">
                  <matrix>
                    <Matrix tx="480" ty="463.05"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="-0.4"/>
                  </transformationPoint>
                  <parametersAsXML><![CDATA[   <property id="label">
      <Inspectable name="label" variable="label" category="" verbose="0" defaultValue="READY" type="String"/>
   </property>
]]></parametersAsXML>
                </DOMComponentInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="header" color="#4F80FF" autoNamed="false">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="UI/Menu2/_assets/Menu2-VS Arena" name="titleClip">
                  <matrix>
                    <Matrix tx="480" ty="68.4"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                </DOMSymbolInstance>
                <DOMSymbolInstance libraryItemName="UI/UI-VSArenaMenu/UI-VSArenaSelect-Container" name="container">
                  <matrix>
                    <Matrix tx="480.6" ty="310.45"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>