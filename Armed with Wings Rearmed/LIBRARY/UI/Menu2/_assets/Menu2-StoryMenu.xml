<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="UI/Menu2/_assets/Menu2-StoryMenu" itemID="567aa733-00000843" lastModified="1458823828" lastUniqueIdentifier="4">
  <timeline>
    <DOMTimeline name="Menu2-StoryMenu">
      <layers>
        <DOMLayer name="actions" color="#9933CC" current="true" isSelected="true" autoNamed="false">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <Actionscript>
                <script><![CDATA[import flash.display.MovieClip;
import com.greensock.TweenMax;
import fl.motion.Color;

var ctrl:PlayerControl;
var sndCtrl:MovieClip;
var _parent:MovieClip;
var _root:MovieClip;
var storyMenu:MovieClip;
var infoClip:MovieClip;
var selectIndex:int;
var cursorY:Number;
var currentClip:MovieClip;

var go:Boolean = false;
var keyFilter0:Boolean;
var keyFilter1:Boolean;
var keyFilter2:Boolean;

function refreshKeyFilters():void {
	keyFilter0 = true;
	keyFilter0 = true;
	keyFilter0 = true;
}

function init ():void {
	ctrl = MovieClip(root).player1Control;
	sndCtrl = MovieClip(root);
	infoClip = MovieClip(parent).infoClip;
	_parent = MovieClip(parent);
	_root = MovieClip(root);
	storyMenu = MovieClip(parent.parent);
	
	cursorY = b0.y;
	
	b0.gotoAndPlay("start");
	b1.gotoAndPlay("start");
	b2.gotoAndPlay("start");
	
	if (!_root.storySessionData[9]) {
		var c:Color = new Color();
		c.setTint(0xffffff, .5);
		b1.transform.colorTransform = c;
	}
	
	//TweenMax.delayedCall(3, function () { b1.gotoAndPlay("start"); }, null, true);
	//TweenMax.delayedCall(6, function () { b2.gotoAndPlay("start"); }, null, true);
	
	//TweenMax.delayedCall(37, function () {
		selectIndex = 0;
		selectBtn(false);
		go = true;
	//}, null, true);
}

function update ():void {
	if (go) {
		offsetSelected();
		
		if (ctrl.ctrl_up) {
			if (!keyFilter0) {
				if (selectIndex > 0) {
					selectIndex --;
					if (selectIndex == 1 && !_root.storySessionData[9]) selectIndex --;
					selectBtn();
				}
				keyFilter0 = true;
			}
		} else {
			keyFilter0 = false;
		}
		
		if (ctrl.ctrl_down) {
			if (!keyFilter1) {
				if (selectIndex < 2) {
					selectIndex ++;
					if (selectIndex == 1 && !_root.storySessionData[9]) selectIndex ++;
					selectBtn();
				}
				keyFilter1 = true;
			}
		} else {
			keyFilter1 = false;
		}
		
		if (ctrl.ctrl_confirmStart) {
			if (!keyFilter2) {
				input();
				keyFilter2 = true;
			}
		} else {
			keyFilter2 = false;
		}
	}
}

function offsetSelected ():void {
	var clip:MovieClip;
	for (var i:int = 0; i < 3; i ++) {
		clip = this["b"+i];
		if (currentClip == clip) {
			clip.x += (10- clip.x)/4;
		} else {
			clip.x += (0 - clip.x)/4;
		}
	}
}

function selectBtn(playSounds:Boolean = true):void {
	if (currentClip) currentClip.gotoAndPlay("out");
	currentClip = this["b"+selectIndex];
	addChild(currentClip);
	currentClip.gotoAndPlay("over");
	if (playSounds) sndCtrl.playUISound(sndCtrl.sndButton1);
	cursorY = currentClip.y;
	infoClip.updateDisplay(selectIndex);
}

function openNewGame():void {
	b0.gotoAndPlay("hit");
	b1.visible = false;
	b2.visible = false;
	go = false;
	_parent.openDifficulty();
}
function continueGame():void {
	sndCtrl.playUISound(sndCtrl.sndButton3);
	_root.startingLevel = _root.data_continueLevel;
	_root.gameDifficulty = _root.data_continueDifficulty;
	storyMenu.continueGame();
	go = false;
	MovieClip(parent).go = false;
}
function levelSelect():void {
	go = false;
	MovieClip(parent).go = false;
	_parent.openLevelSelect();
}

function input ():void {
	switch (selectIndex) {
		case 0:
			openNewGame();
			break;
		case 1:
			continueGame();
			break;
		case 2:
			levelSelect();
		break;
	}			
}]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="clip" color="#4F80FF" autoNamed="false">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMComponentInstance libraryItemName="UI/UI-Btn-Thin/UI-Btn-Thin-Icon" name="b0" uniqueID="1">
                  <matrix>
                    <Matrix ty="-95"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <filters>
                    <DropShadowFilter angle="130.999992031446" blurX="4" blurY="4" distance="4" strength="0.24"/>
                  </filters>
                  <parametersAsXML><![CDATA[   <property id="label">
      <Inspectable name="label" variable="label" category="" verbose="0" defaultValue="NEW GAME" type="String"/>
   </property>
]]></parametersAsXML>
                </DOMComponentInstance>
                <DOMComponentInstance libraryItemName="UI/UI-Btn-Thin/UI-Btn-Thin-Icon-Flip" name="b1" uniqueID="2">
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <filters>
                    <DropShadowFilter angle="130.999992031446" blurX="4" blurY="4" distance="4" strength="0.24"/>
                  </filters>
                  <parametersAsXML><![CDATA[   <property id="label">
      <Inspectable name="label" variable="label" category="" verbose="0" defaultValue="CONTINUE" type="String"/>
   </property>
]]></parametersAsXML>
                </DOMComponentInstance>
                <DOMComponentInstance libraryItemName="UI/UI-Btn-Thin/UI-Btn-Thin-Icon" name="b2" uniqueID="3">
                  <matrix>
                    <Matrix ty="95"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                  <filters>
                    <DropShadowFilter angle="130.999992031446" blurX="4" blurY="4" distance="4" strength="0.24"/>
                  </filters>
                  <parametersAsXML><![CDATA[   <property id="label">
      <Inspectable name="label" variable="label" category="" verbose="0" defaultValue="LEVEL SELECT" type="String"/>
   </property>
]]></parametersAsXML>
                </DOMComponentInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>