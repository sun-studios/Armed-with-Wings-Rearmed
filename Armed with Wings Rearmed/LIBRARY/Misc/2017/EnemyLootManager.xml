<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="Misc/2017/EnemyLootManager" itemID="57fb867e-00005e2a" lastModified="1496190600">
  <timeline>
    <DOMTimeline name="EnemyLootManager">
      <layers>
        <DOMLayer name="Layer 2" color="#9933CC" current="true" isSelected="true">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <Actionscript>
                <script><![CDATA[import com.greensock.TweenMax;
import flash.display.MovieClip;
import flash.events.MouseEvent;
import flash.events.Event;
import flash.text.TextField;


var game:MovieClip;
var vcam:MovieClip;
var spawner:MovieClip;
var gameData:MovieClip;
var particles:MovieClip;
var hudLootBar:MovieClip;
var hudLootScore:TextField;

var timeInterval:Number;
var lootReady:Boolean;
var targetScore:Number;
var oldTargetScore:Number;
var lootCount:Number;
var lootExhausted:Boolean;
var weaponsAvailable:Number;

var lootEnemies:Array;

init();

function init ():void {
	visible = false;
	
	game = MovieClip(parent);
	vcam = MovieClip(parent).vcam;
	gameData = MovieClip(root);
	spawner = game.spawner;
	particles = game.particleLayer;
	//hudLootScore = gameData.hud.topLeft.lootTimer.score_tf;
	hudLootBar = gameData.hud.lootBar;
	hudLootBar.visible = true;
	
	lootEnemies = new Array();
	targetScore = 50;
	oldTargetScore = 0;
	lootCount = 0;
	
	spawner.addEventListener("ENEMYSPAWNED", enemySpawned);
	
}

function update ():void {
	/////////////////////////////////////////
	weaponsAvailable = gameData.data_numofWeapons;
	
	var _exhausted:Boolean;
	var _waiting:Boolean;
	
	if (!lootExhausted) {
		if (!lootReady) {
			if (gameData.sessionScore > targetScore) {
				oldTargetScore = targetScore;
				targetScore = (targetScore* 1.75);
				lootReady = true;
			}
			//hudLootScore.text = ""+Math.round(targetScore-gameData.sessionScore);
			
		} else {
			//hudLootScore.text = "ARRIVING";
			_waiting = true;
		}
	} else {
		//hudLootScore.text = "LOOT EXHAUSTED";
		_exhausted = true;
	}
	
	hudLootBar.updateValues(oldTargetScore, targetScore, _waiting, _exhausted);
	////////////////////////////////////////
	if (lootEnemies.length > 0) {
		checkforDeath();
	}
}

function enemySpawned(e:Event):void {
	if (!lootExhausted) {
		if (lootReady) {
			var en:MovieClip = spawner.lastSpawnedEnemy;
			
			if (en && lootReady && lootEnemies.length == 0) {
				turnEnemyIntoLoot(en);
				lootReady = false;
			}
			
		}
	} else {
		trace("SPAWNED WITH NO LOOT: EXHAUSTED");
	}
}

function turnEnemyIntoLoot (enemy:MovieClip = null):void {
	if (enemy) {
		var en = enemy;
	} else {
		trace("Ummm wat?");
		//en = getRandomEnemy();
	}
	
	if (en) {
		
		var randomLuck:Number = Math.random();
		if (randomLuck <= .3) randomLuck = Math.ceil(Math.random()*10);
		var _base:Number = Math.ceil(gameData.sessionWave*.2);
		var finalValue = _base + Math.ceil(Math.random()*gameData.sessionWave)+randomLuck;
		lootCount = Math.ceil(finalValue);
	
		if (lootCount > weaponsAvailable-1) {
			lootCount = weaponsAvailable-1;
		}		
		
		//turn white
		if (en.colorer) {
			en.colorer.changeColor(MovieClip(root).VFXInvert);
		}
		en.superEnemy = true;
		lootEnemies.push([en, lootCount]);
		
		if (lootCount >= weaponsAvailable-1) {
			lootExhausted = true;
		}
	}
}

function checkforDeath():void {
	for (var i:int = 0; i < lootEnemies.length; i ++) {
		var en:MovieClip  = lootEnemies[i][0];
		
		if (en) {
			if (en.life <= 0) {
				
				trace("GIVE REWARD");
				dropLoot(en, lootEnemies[i][1]);				
				
				if (en.colorer) {
					trace("change enemy color back to none!!");
					en.colorer.changeColor("NONE");
					en.superEnemy = false;
					FreezeFrame(gameData.freezeFrame).attackFreeze(35);
					game.vcam.shakeCamera(30);
					vcam.zoom = .5;
				}
				
				lootEnemies.splice(i,1);
				break;
			}
		}
	}
}

function dropLoot(enemy:MovieClip, lootID:Number):void {
	var loot:MovieClip = particles.addpickupWeapon(enemy.x, enemy.y-(enemy.bound.height*.5), enemy.xSpeed, enemy.ySpeed +10, lootID);
	var cacheTarget:MovieClip = vcam.target;
	//game.camHelper.activated = false;
	vcam.motionOverride = false;
	vcam.target = loot;
	
	
	TweenMax.delayedCall(36, function () {
		if (game.camHelper) {
			game.camHelper.x = game.hero.x;
			game.camHelper.y = game.hero.y;
			game.camHelper.activated = true;
			//vcam.motionOverride = true;
		}
		
		vcam.motionOverride = false;
		vcam.target = cacheTarget;
		vcam.zoom = 1;
		
		},null, true);
}

function getRandomEnemy():MovieClip {
	var enemies:Array = game.enemiesArr;
	var sortedEnemies:Array = new Array();
	
	for (var i:int = 0; i < enemies.length; i ++) {
		var en:MovieClip = enemies[i];
		if (en) {
			if (en.hasOwnProperty("enemyType")) {
				if (String(en.enemyType).slice(0,5) == "ENEMY") {
					if (en.life > 0) sortedEnemies.push(en);
				}				
			}
		}
	}
		
	if (sortedEnemies.length > 0) {
		var r:Number = Math.floor(Math.random()*sortedEnemies.length);
		en = sortedEnemies[r];
		
		return en;
	} else {
		trace("NO ENEMIES TO LOOTERIZE");
		return null;
	}
}]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer 1" color="#4F80FF">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMGroup>
                  <members>
                    <DOMShape>
                      <fills>
                        <FillStyle index="1">
                          <SolidColor color="#0066FF" alpha="0.498039215686275"/>
                        </FillStyle>
                      </fills>
                      <edges>
                        <Edge fillStyle1="1" edges="!-872 -368|873 -368!873 -368|873 367!873 367|-872 367!-872 367|-872 -368"/>
                      </edges>
                    </DOMShape>
                    <DOMStaticText left="-10.5" width="117.2" height="52" autoExpand="true" isSelectable="false">
                      <matrix>
                        <Matrix a="0.5" d="0.5" tx="-24.1" ty="-12.35"/>
                      </matrix>
                      <textRuns>
                        <DOMTextRun>
                          <characters>LOOT&#xD;MANAGER</characters>
                          <textAttrs>
                            <DOMTextAttrs alignment="center" aliasText="false" alpha="0.8" lineHeight="25" size="20" bitmapSize="400" face="Karnivore" fillColor="#FFFFFF"/>
                          </textAttrs>
                        </DOMTextRun>
                      </textRuns>
                    </DOMStaticText>
                  </members>
                </DOMGroup>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>